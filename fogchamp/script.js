// Generated by Haxe 3.4.2
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var visualizer_FormulaOptions = function() {
	this.typeImmunities = true;
};
visualizer_FormulaOptions.__name__ = true;
visualizer_FormulaOptions.prototype = {
	__class__: visualizer_FormulaOptions
};
var visualizer_Formula = function() { };
visualizer_Formula.__name__ = true;
visualizer_Formula.computeResult = function(userPokemonStat,foePokemonStat,userMoveStat,descriptionsDataset,formulaOptions) {
	var userMoveType = userMoveStat.moveType;
	var userTypes = userPokemonStat.types;
	var foeTypes = foePokemonStat.types;
	var factor = descriptionsDataset.getTypeEfficacy(userMoveType,foeTypes[0],foeTypes[1]);
	var userBasePower = visualizer_Formula.computeBasePower(userPokemonStat,foePokemonStat,userMoveStat);
	var isVariableBasePower = visualizer_Formula.VARIABLE_POWER_MOVE.indexOf(userMoveStat.slug) != -1;
	var isFixedDamageMove = visualizer_Formula.FIXED_DAMAGE_MOVE.indexOf(userMoveStat.slug) != -1;
	if(!formulaOptions.typeImmunities && factor == 0) {
		factor = 100;
	}
	if(userBasePower == null && !isFixedDamageMove && !isVariableBasePower) {
		return { factor : factor, minHP : null, maxHP : null, critHP : null};
	}
	var userAttack;
	var foeDefense;
	if(userMoveStat.damageCategory == "physical") {
		userAttack = userPokemonStat.attack;
	} else {
		userAttack = userPokemonStat.specialAttack;
	}
	if(userMoveStat.damageCategory == "physical") {
		foeDefense = foePokemonStat.defense;
	} else {
		foeDefense = foePokemonStat.specialDefense;
	}
	var stab = userTypes.indexOf(userMoveType) != -1;
	var damageResult;
	if(isFixedDamageMove) {
		damageResult = { factor : factor, minHP : visualizer_Formula.LEVEL, maxHP : visualizer_Formula.LEVEL, critHP : visualizer_Formula.LEVEL};
	} else if(isVariableBasePower) {
		var damageResultLow = visualizer_Formula.computeDamage(userAttack,foeDefense,10,stab,factor);
		var damageResultHigh = visualizer_Formula.computeDamage(userAttack,foeDefense,150,stab,factor);
		damageResult = { factor : factor, minHP : damageResultLow.minHP, maxHP : damageResultHigh.maxHP, critHP : damageResultHigh.critHP};
	} else {
		damageResult = visualizer_Formula.computeDamage(userAttack,foeDefense,userBasePower,stab,factor);
	}
	if(userMoveStat.maxHits != null) {
		damageResult = visualizer_Formula.modifyHits(damageResult,userMoveStat.minHits,userMoveStat.maxHits);
	}
	return damageResult;
};
visualizer_Formula.computeBasePower = function(userPokemonStat,foePokemonStat,userMoveStat) {
	var _g = userMoveStat.slug;
	switch(_g) {
	case "frustration":
		if(userPokemonStat.happiness != null) {
			return Math.max(1,(255 - userPokemonStat.happiness) / 2.5) | 0;
		}
		break;
	case "grass-knot":case "low-kick":
		if(foePokemonStat.weight != null) {
			return visualizer_Formula.weightToPower(foePokemonStat.weight);
		}
		break;
	case "return":
		if(userPokemonStat.happiness != null) {
			return Math.max(1,userPokemonStat.happiness / 2.5) | 0;
		}
		break;
	}
	return userMoveStat.power;
};
visualizer_Formula.computeDamage = function(userAttack,foeDefense,userBasePower,stab,damageFactor) {
	var modifier = damageFactor / 100;
	if(stab) {
		modifier *= 1.5;
	}
	var damage = (2 * visualizer_Formula.LEVEL + 10) / 250 * (userAttack / foeDefense) * userBasePower + 2;
	damage *= modifier;
	var minDamage = damage * visualizer_Formula.RANDOM_MIN_MODIFIER;
	var critDamage = damage * visualizer_Formula.CRIT_MODIFIER;
	return { factor : damageFactor, minHP : Math.max(1,minDamage) | 0, maxHP : Math.max(1,damage) | 0, critHP : Math.max(1,critDamage) | 0};
};
visualizer_Formula.modifyHits = function(damageResult,minHits,maxHits) {
	var minDamage = damageResult.minHP * minHits;
	var maxDamage = damageResult.maxHP * maxHits;
	var critDamage = damageResult.critHP * maxHits;
	return { factor : damageResult.factor, minHP : minDamage, maxHP : maxDamage, critHP : critDamage};
};
visualizer_Formula.resultsToPercentages = function(damageResult,foeHP) {
	return { factor : damageResult.factor, minHP : damageResult.minHP, maxHP : damageResult.maxHP, critHP : damageResult.critHP, minHPPercent : damageResult.minHP / foeHP * 100 | 0, maxHPPercent : damageResult.maxHP / foeHP * 100 | 0, critHPPercent : damageResult.critHP / foeHP * 100 | 0};
};
visualizer_Formula.weightToPower = function(weight) {
	if(weight < 10) {
		return 20;
	} else if(weight < 25) {
		return 40;
	} else if(weight < 50) {
		return 60;
	} else if(weight < 100) {
		return 80;
	} else if(weight < 200) {
		return 100;
	} else {
		return 120;
	}
};
var visualizer_Main = function() {
	this.userMessage = new visualizer_UserMessage();
	this.pokemonDataset = new visualizer_dataset_PokemonDataset();
	this.apiPokemonDataset = new visualizer_dataset_APIPokemonDataset();
	this.movesDataset = new visualizer_dataset_MovesDataset();
	this.descriptionsDataset = new visualizer_dataset_DescriptionsDataset();
	this.database = new visualizer_model_PokemonDatabase(this.pokemonDataset,this.apiPokemonDataset,this.movesDataset,this.descriptionsDataset);
};
visualizer_Main.__name__ = true;
visualizer_Main.main = function() {
	var app = new visualizer_Main();
	$(window.document.body).ready(function(event) {
		app.run();
	});
};
visualizer_Main.prototype = {
	run: function() {
		this.loadPokemonDataset();
	}
	,loadPokemonDataset: function() {
		var _gthis = this;
		this.userMessage.showMessage("Loading Pokemon dataset.");
		this.pokemonDataset.load(function(event) {
			if(event.success) {
				_gthis.userMessage.hide();
				_gthis.loadMovesDataset();
			} else {
				_gthis.userMessage.showMessage(visualizer_Main.LOAD_FAIL_MSG);
			}
		});
	}
	,loadMovesDataset: function() {
		var _gthis = this;
		this.userMessage.showMessage("Loading Moves dataset.");
		this.movesDataset.load(function(event) {
			if(event.success) {
				_gthis.userMessage.hide();
				_gthis.loadDescriptionsDataset();
			} else {
				_gthis.userMessage.showMessage(visualizer_Main.LOAD_FAIL_MSG);
			}
		});
	}
	,loadDescriptionsDataset: function() {
		var _gthis = this;
		this.userMessage.showMessage("Loading Descriptions dataset.");
		this.descriptionsDataset.load(function(event) {
			if(event.success) {
				_gthis.userMessage.hide();
				_gthis.loadAPIMovesets();
			} else {
				_gthis.userMessage.showMessage(visualizer_Main.LOAD_FAIL_MSG);
			}
		});
	}
	,loadAPIMovesets: function() {
		try {
			this.apiPokemonDataset.loadFromStorage();
		} catch( error ) {
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			if( js_Boot.__instanceof(error,visualizer_dataset_StorageEmpty) ) {
			} else throw(error);
		}
		this.loadUI();
	}
	,loadUI: function() {
		this.ui = new visualizer_UI(this.database);
		this.ui.setup();
	}
	,__class__: visualizer_Main
};
var visualizer_Orientation = { __ename__ : true, __constructs__ : ["Vertical","Horizontal"] };
visualizer_Orientation.Vertical = ["Vertical",0];
visualizer_Orientation.Vertical.__enum__ = visualizer_Orientation;
visualizer_Orientation.Horizontal = ["Horizontal",1];
visualizer_Orientation.Horizontal.__enum__ = visualizer_Orientation;
var visualizer_MatchupChart = function(pokemonDatabase,formulaOptions) {
	this.database = pokemonDatabase;
	this.formulaOptions = formulaOptions;
};
visualizer_MatchupChart.__name__ = true;
visualizer_MatchupChart.prototype = {
	setPokemon: function(pokemonStatsList) {
		this.pokemonStatsList = pokemonStatsList;
	}
	,renderTable: function() {
		this.tableElement = window.document.createElement("table");
		this.tableElement.classList.add("matchupChart");
		var maxWidth = visualizer_MatchupChart.POKEMON_LABEL + visualizer_MatchupChart.POKEMON_MOVES_LABEL + visualizer_MatchupChart.NUM_POKEMON_PER_TEAM * visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
		this.renderTopPokemonLabelRow(js_Boot.__cast(this.tableElement.insertRow(-1) , HTMLTableRowElement));
		this.renderTopPokemonMovesRow(js_Boot.__cast(this.tableElement.insertRow(-1) , HTMLTableRowElement));
		var _g1 = 0;
		var _g = visualizer_MatchupChart.NUM_POKEMON_PER_TEAM * (visualizer_MatchupChart.NUM_MOVES_PER_POKEMON + visualizer_MatchupChart.DIVIDER);
		while(_g1 < _g) {
			var moveRowIndex = _g1++;
			this.renderMoveRow(moveRowIndex,js_Boot.__cast(this.tableElement.insertRow(-1) , HTMLTableRowElement));
		}
		return this.tableElement;
	}
	,renderTopPokemonLabelRow: function(rowElement) {
		var cornerCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
		cornerCell.colSpan = cornerCell.rowSpan = visualizer_MatchupChart.POKEMON_LABEL + visualizer_MatchupChart.POKEMON_MOVES_LABEL;
		var _g = 0;
		var _g1 = [3,4,5];
		while(_g < _g1.length) {
			var slotNum = _g1[_g];
			++_g;
			var pokemonStat = this.pokemonStatsList[slotNum];
			var labelCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
			labelCell.colSpan = visualizer_MatchupChart.DIVIDER + visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
			this.processPokemonLabelCell(pokemonStat,labelCell,"top",slotNum);
		}
	}
	,renderTopPokemonMovesRow: function(rowElement) {
		var _g = 0;
		var _g1 = [3,4,5];
		while(_g < _g1.length) {
			var slotNum = _g1[_g];
			++_g;
			var pokemonStat = this.pokemonStatsList[slotNum];
			this.renderMoveDividerCell(rowElement,pokemonStat,"top");
			var _g3 = 0;
			var _g2 = visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
			while(_g3 < _g2) {
				var moveIndex = _g3++;
				this.renderMoveLabelCell(pokemonStat,moveIndex,rowElement,"top");
			}
		}
	}
	,renderMoveRow: function(rowIndex,rowElement) {
		var cellLength = visualizer_MatchupChart.DIVIDER + visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
		var leftSlotNum = rowIndex / cellLength | 0;
		var leftMoveIndex = (rowIndex % cellLength | 0) - 1;
		var leftPokemonStat = this.pokemonStatsList[leftSlotNum];
		if(rowIndex % cellLength == 0) {
			var slotNum = rowIndex / cellLength | 0;
			this.renderLeftPokemonLabel(leftPokemonStat,rowElement,slotNum);
			this.renderMoveDividerCell(rowElement,leftPokemonStat,"left");
		}
		if(leftMoveIndex >= 0) {
			this.renderMoveLabelCell(leftPokemonStat,leftMoveIndex,rowElement,"left");
		}
		var _g = 3;
		while(_g < 6) {
			var topSlotNum = _g++;
			var topPokemonStat = this.pokemonStatsList[topSlotNum];
			this.renderVersusMatrix(rowElement,leftMoveIndex,leftPokemonStat,topPokemonStat);
		}
	}
	,renderVersusMatrix: function(rowElement,leftMoveIndex,leftPokemonStat,topPokemonStat) {
		if(leftMoveIndex == -1) {
			var dividerCell = this.renderDividerCell(rowElement,"first");
			var dividerCellWhoFaster;
			if(leftPokemonStat.speed > topPokemonStat.speed) {
				dividerCellWhoFaster = "blue";
			} else if(leftPokemonStat.speed < topPokemonStat.speed) {
				dividerCellWhoFaster = "red";
			} else {
				dividerCellWhoFaster = "tie";
			}
			dividerCell.classList.add("matchupChartDividerCellSpeed-" + dividerCellWhoFaster);
			var topPokemonMoveSlugs = topPokemonStat.moves;
			var _g1 = 0;
			var _g = visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
			while(_g1 < _g) {
				var topMoveIndex = _g1++;
				var cell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
				cell.rowSpan = topMoveIndex + 1;
				if(topMoveIndex < topPokemonMoveSlugs.length) {
					var moveStat = this.database.movesDataset.getMoveStats(topPokemonMoveSlugs[topMoveIndex],topPokemonStat);
					this.processCellEfficacy(cell,moveStat,topPokemonStat,leftPokemonStat,"top");
				} else {
					this.processCellEfficacy(cell,null,topPokemonStat,leftPokemonStat,"top");
				}
			}
		} else {
			var cell1 = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
			cell1.colSpan = leftMoveIndex + 1;
			var leftPokemonMoveSlugs = leftPokemonStat.moves;
			if(leftMoveIndex < leftPokemonMoveSlugs.length) {
				var moveStat1 = this.database.movesDataset.getMoveStats(leftPokemonMoveSlugs[leftMoveIndex],leftPokemonStat);
				this.processCellEfficacy(cell1,moveStat1,leftPokemonStat,topPokemonStat,"left");
			} else {
				this.processCellEfficacy(cell1,null,leftPokemonStat,topPokemonStat,"left");
			}
			if(leftMoveIndex == 3) {
				this.renderDividerCell(rowElement,"last");
			} else {
				this.renderDividerCell(rowElement);
			}
		}
	}
	,renderLeftPokemonLabel: function(pokemonStat,rowElement,slotNum) {
		var labelCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
		labelCell.rowSpan = visualizer_MatchupChart.DIVIDER + visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
		this.processPokemonLabelCell(pokemonStat,labelCell,"left",slotNum);
	}
	,renderMoveLabelCell: function(pokemonStat,moveIndex,rowElement,position) {
		var labelCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
		var moveSlugs = pokemonStat.moves;
		if(moveIndex < moveSlugs.length) {
			var moveSlug = moveSlugs[moveIndex];
			var moveStats = this.database.movesDataset.getMoveStats(moveSlug,pokemonStat);
			this.processMoveLabelCell(moveStats,labelCell,position);
		} else {
			this.processMoveLabelCell(null,labelCell,position);
		}
	}
	,processPokemonLabelCell: function(pokemonStats,cell,position,slotNum) {
		var container = window.document.createElement("div");
		container.classList.add("matchupChartPokemonLabelContainer-" + position);
		var subContainer = window.document.createElement("div");
		subContainer.classList.add("matchupChartPokemonLabelSubContainer-" + position);
		subContainer.classList.add("matchupChartPokemonLabel");
		this.renderPokemonIcon(subContainer,pokemonStats,slotNum);
		var _g = 0;
		var _g1 = pokemonStats.types;
		while(_g < _g1.length) {
			var pokemonType = _g1[_g];
			++_g;
			var typeIcon = window.document.createElement("span");
			this.renderMiniTypeIcon(typeIcon,pokemonType);
			subContainer.appendChild(typeIcon);
		}
		var labelText = window.document.createElement("span");
		this.renderPokemonName(labelText,pokemonStats);
		subContainer.appendChild(labelText);
		subContainer.appendChild(window.document.createTextNode(" "));
		var editText = window.document.createElement("span");
		editText.textContent = "✏";
		editText.title = "Edit";
		editText.setAttribute("data-edit-slot",slotNum == null ? "null" : "" + slotNum);
		subContainer.appendChild(editText);
		subContainer.appendChild(window.document.createElement("br"));
		this.renderAttackStats(subContainer,pokemonStats);
		container.appendChild(subContainer);
		cell.appendChild(container);
	}
	,processMoveLabelCell: function(moveStats,cell,position) {
		cell.classList.add("matchupChartMoveLabelCell-" + position);
		var container = window.document.createElement("div");
		container.classList.add("matchupChartMoveLabelContainer-" + position);
		var subContainer = window.document.createElement("div");
		subContainer.classList.add("matchupChartMoveLabelSubContainer-" + position);
		subContainer.classList.add("matchupChartMoveLabel");
		if(moveStats != null) {
			var typeIcon = window.document.createElement("span");
			this.renderMiniTypeIcon(typeIcon,moveStats.moveType);
			subContainer.appendChild(typeIcon);
			var moveLabelText = window.document.createElement("span");
			this.renderMoveText(moveLabelText,moveStats);
			subContainer.appendChild(moveLabelText);
			var moveCategoryText = window.document.createElement("sup");
			this.renderMoveCategoryShortText(moveCategoryText,moveStats);
			subContainer.appendChild(moveCategoryText);
			subContainer.appendChild(window.document.createElement("br"));
			var accuracyText = moveStats.accuracy != null ? moveStats.accuracy == null ? "null" : "" + moveStats.accuracy : "-";
			var ppText = moveStats.pp != null ? moveStats.pp == null ? "null" : "" + moveStats.pp : "-";
			var powerText = moveStats.power != null ? moveStats.power == null ? "null" : "" + moveStats.power : "-";
			var moveAccText = window.document.createElement("span");
			moveAccText.innerHTML = "\n            " + accuracyText + "<span class=\"dimLabel\">%</span>\n            " + ppText + "<span class=\"dimLabel\">pp</span>\n            " + powerText + "<span class=\"dimLabel\">pwr</span>\n            ";
			subContainer.appendChild(moveAccText);
			var priorityElement = window.document.createElement("span");
			this.renderMovePriority(priorityElement,moveStats);
			subContainer.appendChild(priorityElement);
		}
		container.appendChild(subContainer);
		cell.appendChild(container);
	}
	,renderDividerCell: function(rowElement,classSuffix) {
		var dividerCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
		dividerCell.classList.add("matchupChartDividerCell");
		if(classSuffix != null) {
			dividerCell.classList.add("matchupChartDividerCell-" + classSuffix);
		}
		return dividerCell;
	}
	,renderMoveDividerCell: function(rowElement,pokemonStats,classSuffix) {
		var dividerCell = this.renderDividerCell(rowElement,classSuffix);
		var container = window.document.createElement("div");
		container.classList.add("matchupChartMoveDividerContainer-" + classSuffix);
		dividerCell.appendChild(container);
		var subContainer = window.document.createElement("div");
		subContainer.classList.add("matchupChartMoveDividerSubContainer-" + classSuffix);
		subContainer.classList.add("matchupChartMoveDivider");
		container.appendChild(subContainer);
		var abilityText = window.document.createElement("span");
		this.renderAbilityText(abilityText,pokemonStats);
		subContainer.appendChild(abilityText);
		subContainer.appendChild(window.document.createElement("br"));
		var itemText = window.document.createElement("span");
		this.renderItemText(itemText,pokemonStats);
		subContainer.appendChild(itemText);
		return dividerCell;
	}
	,processCellEfficacy: function(cell,userMoveStat,userPokemonStat,foePokemonStat,position) {
		cell.classList.add("matchupChartEfficacyCell-" + position);
		if(userMoveStat == null || userMoveStat.accuracy == null && userMoveStat.power == null) {
			return;
		}
		var container = window.document.createElement("div");
		container.classList.add("matchupChartEfficacyContainer-" + position);
		var subContainer = window.document.createElement("div");
		subContainer.classList.add("matchupChartEfficacySubContainer-" + position);
		subContainer.classList.add("matchupChartEfficacy");
		var damageResult = visualizer_Formula.computeResult(userPokemonStat,foePokemonStat,userMoveStat,this.database.descriptionsDataset,this.formulaOptions);
		var factor = damageResult.factor;
		var factorString;
		switch(factor) {
		case 0:
			factorString = "0";
			break;
		case 25:
			factorString = "¼";
			break;
		case 50:
			factorString = "½";
			break;
		case 100:
			factorString = "1";
			break;
		case 200:
			factorString = "2";
			break;
		case 400:
			factorString = "4";
			break;
		default:
			factorString = "Err";
		}
		if(damageResult.maxHP == null) {
			if(userMoveStat.damageCategory == "status") {
				if(factor == 0) {
					subContainer.textContent = "✕";
				} else {
					subContainer.textContent = "○";
				}
			} else {
				subContainer.textContent = "×" + factorString;
			}
			subContainer.classList.add("damageEfficacy-" + factor);
		} else {
			var damageResultPercent = visualizer_Formula.resultsToPercentages(damageResult,foePokemonStat.hp);
			subContainer.innerHTML = "<span class=\"damageEfficacy-" + factor + " matchupChartSubEfficacy\">×" + factorString + "</span>\n                <br>\n                <span class=matchupChartSubEfficacy\n                data-help-slug=\"damage:\n                " + userPokemonStat.name + " " + userMoveStat.name + ":" + ("" + damageResultPercent.minHPPercent + ":") + ("" + damageResultPercent.maxHPPercent + ":") + ("" + damageResultPercent.critHPPercent + ":") + ("" + damageResultPercent.minHP + ":") + ("" + damageResultPercent.maxHP + ":") + ("" + damageResultPercent.critHP + "\"\n                >" + damageResultPercent.maxHPPercent + "<span class=dimLabel>%</span>\n                </span>");
		}
		container.appendChild(subContainer);
		cell.appendChild(container);
	}
	,renderMiniTypeIcon: function(element,pokemonType) {
		element.classList.add("pokemonType-" + pokemonType);
		element.classList.add("miniPokemonTypeIcon");
		element.textContent = pokemonType.charAt(0);
		element.setAttribute("aria-label",pokemonType);
		element.setAttribute("title",pokemonType);
	}
	,renderPokemonName: function(element,pokemonStats) {
		element.textContent = pokemonStats.name;
		element.classList.add("pokemonStatsName");
	}
	,renderAbilityText: function(element,pokemonStats) {
		if(pokemonStats.ability != null && pokemonStats.ability != "") {
			element.textContent = this.database.descriptionsDataset.getAbilityName(pokemonStats.ability);
			element.setAttribute("data-help-slug","ability:" + pokemonStats.ability);
		} else {
			element.textContent = "-";
		}
	}
	,renderItemText: function(element,pokemonStats) {
		if(pokemonStats.item != null && pokemonStats.item != "") {
			element.textContent = this.database.descriptionsDataset.getItemName(pokemonStats.item);
			element.setAttribute("data-help-slug","item:" + pokemonStats.item);
		} else {
			element.textContent = "-";
		}
	}
	,renderMoveText: function(element,moveStats) {
		element.textContent = moveStats.name;
		element.setAttribute("data-help-slug","move:" + moveStats.slug);
	}
	,renderMoveCategoryShortText: function(element,moveStats) {
		element.textContent = HxOverrides.substr(moveStats.damageCategory,0,2);
		element.classList.add("damageCategory-" + moveStats.damageCategory);
		element.title = moveStats.damageCategory;
	}
	,renderMovePriority: function(element,moveStats) {
		if(moveStats.priority != 0) {
			if(moveStats.priority > 0) {
				element.textContent = "+" + moveStats.priority;
				element.classList.add("movePriority-high");
			} else {
				element.textContent = moveStats.priority == null ? "null" : "" + moveStats.priority;
				element.classList.add("movePriority-low");
			}
			element.title = "Priority";
		}
	}
	,renderAttackStats: function(element,pokemonStats) {
		var subElement = element.ownerDocument.createElement("span");
		subElement.classList.add("pokemonHP");
		subElement.textContent = pokemonStats.hp == null ? "null" : "" + pokemonStats.hp;
		subElement.title = "HP";
		element.appendChild(subElement);
		element.appendChild(element.ownerDocument.createTextNode(" "));
		subElement = element.ownerDocument.createElement("span");
		subElement.classList.add("pokemonAttack");
		subElement.textContent = pokemonStats.attack == null ? "null" : "" + pokemonStats.attack;
		subElement.title = "Attack";
		element.appendChild(subElement);
		element.appendChild(element.ownerDocument.createTextNode("·"));
		subElement = element.ownerDocument.createElement("span");
		subElement.classList.add("pokemonDefense");
		subElement.textContent = pokemonStats.defense == null ? "null" : "" + pokemonStats.defense;
		subElement.title = "Defense";
		element.appendChild(subElement);
		element.appendChild(element.ownerDocument.createTextNode(" "));
		subElement = element.ownerDocument.createElement("span");
		subElement.classList.add("pokemonSpecialAttack");
		subElement.textContent = pokemonStats.specialAttack == null ? "null" : "" + pokemonStats.specialAttack;
		subElement.title = "Special Attack";
		element.appendChild(subElement);
		element.appendChild(element.ownerDocument.createTextNode("·"));
		subElement = element.ownerDocument.createElement("span");
		subElement.classList.add("pokemonSpecialDefense");
		subElement.textContent = pokemonStats.specialDefense == null ? "null" : "" + pokemonStats.specialDefense;
		subElement.title = "Special Defense";
		element.appendChild(subElement);
		element.appendChild(element.ownerDocument.createTextNode(" "));
		subElement = element.ownerDocument.createElement("span");
		subElement.classList.add("pokemonSpeed");
		subElement.textContent = pokemonStats.speed == null ? "null" : "" + pokemonStats.speed;
		subElement.title = "Speed";
		element.appendChild(subElement);
	}
	,renderPokemonIcon: function(element,pokemonStats,slotNum) {
		var img = element.ownerDocument.createElement("img");
		img.classList.add("pokemonIcon");
		img.classList.add("pokemonIconChart");
		img.classList.add("pokemonIconSlot-" + slotNum);
		img.src = "static/veekun/icons/" + pokemonStats.number + ".png";
		element.appendChild(img);
	}
	,__class__: visualizer_MatchupChart
};
var visualizer_UI = function(pokemonDatabase) {
	this.database = pokemonDatabase;
	this.userMessage = new visualizer_UserMessage();
	var this1 = new Array(6);
	this.currentPokemon = this1;
	this.formulaOptions = new visualizer_FormulaOptions();
};
visualizer_UI.__name__ = true;
visualizer_UI.renderTemplate = function(template,data) {
	return visualizer_UI.Mustache.render(template,data);
};
visualizer_UI.prototype = {
	setup: function() {
		this.renderSelectionList();
		this.attachSelectChangeListeners();
		this.renderEditionSelect();
		this.attachEditionSelectListener();
		this.attachUrlFragmentChangeListener();
		this.attachFetchFromAPIButtonListener();
		this.attachMovesetDownloadButtonLisenter();
		var editions = this.database.getEditionNames();
		if(this.database.apiPokemonDataset.isLoaded()) {
			this.selectEdition(editions[editions.length - 1]);
		} else {
			this.selectEdition(editions[editions.length - 2]);
		}
		this.readUrlFragment();
		if(this.currentPokemon[0] == null) {
			this.setSelectionByNumbers(visualizer_UI.DEFAULT_POKEMON);
		}
		this.attachOptionsListeners();
		this.renderAll();
		this.promptToDownloadMovesets();
	}
	,renderSelectionList: function() {
		var template = $("#pokemonSelectionTemplate").html();
		var selections = this.buildSelectionList();
		var rendered = visualizer_UI.renderTemplate(template,{ selections : selections, slots : [0,1,2]});
		$("#pokemonSelectionBlue").html(rendered);
		var rendered1 = visualizer_UI.renderTemplate(template,{ selections : selections, slots : [3,4,5]});
		$("#pokemonSelectionRed").html(rendered1);
	}
	,buildSelectionList: function() {
		var list = [];
		var _g = 0;
		var _g1 = this.database.getPokemonSlugs();
		while(_g < _g1.length) {
			var slug = _g1[_g];
			++_g;
			var stats = this.database.getPokemonStats(slug);
			var name = stats.name;
			if(stats.nickname != null && name.toLowerCase() != stats.nickname.toLowerCase()) {
				name += " (" + stats.nickname + ")";
			}
			if(stats.movesetName != null) {
				name += " - " + stats.movesetName;
			}
			list.push({ slug : slug, name : name});
		}
		list.sort(function(x,y) {
			return Reflect.compare(x.name.toLowerCase(),y.name.toLowerCase());
		});
		return list;
	}
	,attachSelectChangeListeners: function() {
		var _gthis = this;
		var _g = 0;
		while(_g < 6) {
			var i = [_g++];
			var jquery = [$("#selectionSelect" + i[0])];
			var tmp = (function(jquery1,i1) {
				return function(event) {
					var i2 = i1[0];
					var tmp1 = jquery1[0].val();
					_gthis.selectChanged(i2,tmp1);
				};
			})(jquery,i);
			jquery[0].change(tmp);
			var tmp2 = (function(i3) {
				return function(event1) {
					$(".pokemonIconSlot-" + i3[0]).addClass("pokemonIcon-focus");
				};
			})(i);
			jquery[0].focus(tmp2);
			var tmp3 = (function(i4) {
				return function(event2) {
					$(".pokemonIconSlot-" + i4[0]).removeClass("pokemonIcon-focus");
				};
			})(i);
			jquery[0].focusout(tmp3);
		}
	}
	,renderEditionSelect: function() {
		var selectElement = js_Boot.__cast(window.document.getElementById("pokemonEditionSelect") , HTMLSelectElement);
		var names = this.database.getEditionNames();
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			var optionElement = window.document.createElement("option");
			optionElement.value = name;
			optionElement.textContent = name;
			selectElement.add(optionElement);
		}
	}
	,attachEditionSelectListener: function() {
		var _gthis = this;
		var selectElement = js_Boot.__cast(window.document.getElementById("pokemonEditionSelect") , HTMLSelectElement);
		$("#pokemonEditionSelect").change(function(event) {
			var tmp = $(selectElement).val();
			_gthis.selectEdition(tmp);
		});
	}
	,selectEdition: function(name) {
		if(name == visualizer_model_PokemonDatabase.API_EDITION) {
			$("#downloadMovesetsButton").prop("disabled",false);
		} else {
			$("#downloadMovesetsButton").prop("disabled","disabled");
		}
		this.database.setEdition(name);
		var selectElement = js_Boot.__cast(window.document.getElementById("pokemonEditionSelect") , HTMLSelectElement);
		selectElement.selectedIndex = this.database.getEditionNames().indexOf(name);
		this.reloadSelectionList();
		if(this.currentPokemon[0] != null) {
			this.updateCurrentToNearestStatsByEdition();
			this.renderAll();
		}
	}
	,attachUrlFragmentChangeListener: function() {
		window.onhashchange = $bind(this,this.readUrlFragment);
	}
	,readUrlFragment: function() {
		var fragment = window.location.hash;
		if(fragment == this.currentUrlHash) {
			return;
		}
		var pattern = new EReg("([0-9]+)([a-z0-9_ ]*)[/,-]" + "([0-9]+)([a-z0-9_ ]*)[/,-]" + "([0-9]+)([a-z0-9_ ]*)[/,-]" + "([0-9]+)([a-z0-9_ ]*)[/,-]" + "([0-9]+)([a-z0-9_ ]*)[/,-]" + "([0-9]+)([a-z0-9_ ]*)","i");
		if(pattern.match(fragment)) {
			var this1 = new Array(6);
			var pokemonNums = this1;
			var this2 = new Array(6);
			var movesetNames = this2;
			var _g = 0;
			while(_g < 6) {
				var i = _g++;
				pokemonNums[i] = Std.parseInt(pattern.matched(i * 2 + 1));
				movesetNames[i] = StringTools.replace(pattern.matched(i * 2 + 2),"_"," ");
			}
			this.setSelectionByNumbers(pokemonNums,movesetNames);
			this.renderAll(false);
		} else {
			this.userMessage.showMessage("The URL fragment (stuff after the hash symbol) isn't valid.");
		}
	}
	,writeUrlFragment: function() {
		var fragment_b = "";
		fragment_b += "#";
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var pokemonStats = this.currentPokemon[i];
			var pokemonNum = pokemonStats.number;
			fragment_b += Std.string("" + pokemonNum);
			if(pokemonStats.movesetName != null) {
				fragment_b += Std.string(StringTools.replace(visualizer_api_APIFacade.slugify(pokemonStats.movesetName),"-","_"));
			}
			if(i < 5) {
				fragment_b += "-";
			}
		}
		this.currentUrlHash = fragment_b;
		window.location.hash = fragment_b;
	}
	,attachFetchFromAPIButtonListener: function() {
		var _gthis = this;
		$("#fetchMatchFromAPIButton").click(function(event) {
			_gthis.fetchFromAPI();
		});
	}
	,attachMovesetDownloadButtonLisenter: function() {
		var _gthis = this;
		$("#downloadMovesetsButton").click(function(event) {
			$("#downloadMovesetsButton").prop("disabled","disabled");
			_gthis.fetchMovesetsFromAPI();
		});
	}
	,fetchFromAPI: function() {
		var _gthis = this;
		this.userMessage.showMessage("Fetching current match from TPP API...");
		this.database.currentMatchDataset.load(function(loadEvent) {
			$("#fetchMatchFromAPIButton").prop("disabled",false);
			if(loadEvent.success) {
				var tmp = _gthis.database.getCurrentMatchPokemonStats();
				_gthis.setSelectionByAPI(tmp);
			} else if(loadEvent.errorMessage != null) {
				_gthis.userMessage.showMessage("An error occurred fetching current match: \"" + loadEvent.errorMessage + "\". Complain to Felk if error persists.");
			} else {
				_gthis.userMessage.showMessage("An error occured while attempting to parse the data. File a bug report if this persists.");
			}
		});
	}
	,promptToDownloadMovesets: function() {
		var _gthis = this;
		if(this.database.apiPokemonDataset.slugs.length == 0) {
			$("#promptDialog").html("\n            <p>\n            <big><strong>Download the latest movesets from TPP?</strong></big>\n            </p>\n            <p>Downloading will take a while but this only has to be done infrequently.</p>\n            ").dialog({ modal : true, buttons : { "Skip" : function() {
				$("#promptDialog").dialog("close");
			}, "Download" : function() {
				$("#downloadMovesetsButton").prop("disabled","disabled");
				_gthis.fetchMovesetsFromAPI();
				$("#promptDialog").dialog("close");
			}}, open : function() {
				$(".ui-dialog-buttonset button:nth-child(2)").focus();
			}});
		}
	}
	,fetchMovesetsFromAPI: function() {
		var _gthis = this;
		this.userMessage.showMessage("Loading Movesets from TPP. This may take a while...");
		var showProgressCallback = function(value) {
			_gthis.userMessage.showMessage("Loading Movesets from TPP. Progress: " + value + " movesets loaded");
		};
		this.database.apiPokemonDataset.clearStorage();
		this.database.apiPokemonDataset.apiFacade.progressCallback = showProgressCallback;
		this.database.apiPokemonDataset.load(function(event) {
			if(event.success) {
				_gthis.userMessage.hide();
				_gthis.database.apiPokemonDataset.saveToStorage();
				var tmp = _gthis.database.getEditionNames()[_gthis.database.getEditionNames().length - 1];
				_gthis.selectEdition(tmp);
			} else {
				_gthis.userMessage.showMessage("Failed to load movesets from TPP: " + event.errorMessage);
			}
		});
	}
	,setSelectionByNumbers: function(pokemonNums,movesetNames) {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var movesetName = null;
			if(movesetNames != null) {
				if(movesetNames[i] != "") {
					movesetName = movesetNames[i];
				}
			}
			var slug;
			try {
				slug = this.database.getPokemonSlugByID(pokemonNums[i],movesetName);
			} catch( error ) {
				if (error instanceof js__$Boot_HaxeError) error = error.val;
				if( js_Boot.__instanceof(error,visualizer_model_StatsNotFoundError) ) {
					slug = this.database.getPokemonSlugByID(pokemonNums[i]);
				} else throw(error);
			}
			this.currentPokemon[i] = this.database.getPokemonStats(slug);
		}
		this.syncSelectionListToCurrent();
	}
	,updateCurrentToNearestStatsByEdition: function() {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var pokemonStats;
			try {
				pokemonStats = this.database.getPokemonStats(this.currentPokemon[i].slug);
			} catch( error ) {
				if (error instanceof js__$Boot_HaxeError) error = error.val;
				if( js_Boot.__instanceof(error,visualizer_model_StatsNotFoundError) ) {
					try {
						var slug = this.database.getPokemonSlugByID(this.currentPokemon[i].number);
						pokemonStats = this.database.getPokemonStats(slug);
					} catch( error1 ) {
						if (error1 instanceof js__$Boot_HaxeError) error1 = error1.val;
						if( js_Boot.__instanceof(error1,visualizer_model_StatsNotFoundError) ) {
							this.userMessage.showMessage("The dataset for this edition is corrupt, unrecognized, or not yet loaded.");
							throw new js__$Boot_HaxeError("Missing dataset");
						} else throw(error1);
					}
				} else throw(error);
			}
			this.currentPokemon[i] = pokemonStats;
		}
		this.syncSelectionListToCurrent();
	}
	,setSelectionByAPI: function(pokemonStatsList) {
		var selectElement = js_Boot.__cast(window.document.getElementById("pokemonEditionSelect") , HTMLSelectElement);
		var _g = 0;
		while(_g < 6) {
			var slotNum = _g++;
			var pokemonStats = new visualizer_datastruct_VisualizerPokemonStats();
			pokemonStats.update(pokemonStatsList[slotNum]);
			this.currentPokemon[slotNum] = pokemonStats;
		}
		this.reloadSelectionList();
		this.syncSelectionListToCurrent();
		this.renderAll();
	}
	,selectChanged: function(slotNum,slug) {
		this.currentPokemon[slotNum] = this.database.getPokemonStats(slug);
		this.renderAll();
	}
	,reloadSelectionList: function() {
		this.renderSelectionList();
		this.attachSelectChangeListeners();
	}
	,syncSelectionListToCurrent: function() {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var stats = this.currentPokemon[i];
			$("#selectionSelect" + i).prop("disabled","disabled").val(stats.slug).prop("disabled",false);
		}
	}
	,renderAll: function(updateUrlFragment) {
		if(updateUrlFragment == null) {
			updateUrlFragment = true;
		}
		try {
			this.renderMatchCommand();
			this.renderChart();
			this.attachHelpListeners();
			$(".pokemonEditContainer").show();
			this.attachEditListeners();
			if(updateUrlFragment) {
				this.writeUrlFragment();
			}
			this.renderExtraUrls();
			this.userMessage.hide();
		} catch( error ) {
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			this.userMessage.showMessage("An error occured while attempting to render the data. File a bug report if this persists.");
			throw js__$Boot_HaxeError.wrap(error);
		}
	}
	,renderMatchCommand: function() {
		var buffer_b = "";
		buffer_b += "/w tpp match ";
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var pokemonStats = this.currentPokemon[i];
			buffer_b += Std.string(pokemonStats.name);
			if(pokemonStats.movesetName != null) {
				buffer_b += Std.string("-" + pokemonStats.movesetName);
			}
			if(i == 2) {
				buffer_b += "/";
			} else if(i < 5) {
				buffer_b += ",";
			}
		}
		var element = js_Boot.__cast(window.document.getElementById("matchCommand") , HTMLDivElement);
		element.textContent = buffer_b;
	}
	,getMatchNumbers: function() {
		var numbers = [];
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var pokemonNum = this.currentPokemon[i].number;
			numbers.push(pokemonNum);
		}
		return numbers;
	}
	,attachHelpListeners: function() {
		var _gthis = this;
		var _g_j;
		var _g_i = 0;
		_g_j = $("[data-help-slug]");
		while(_g_i < _g_j.length) {
			var element = [$(_g_j[_g_i++])];
			var clickElement = $("<a href=>");
			clickElement.addClass("clickHelp");
			clickElement.click((function(element1) {
				return function(event) {
					var tmp = element1[0].attr("data-help-slug");
					_gthis.clickedHelp(tmp);
					return false;
				};
			})(element));
			element[0].wrapInner(clickElement);
		}
	}
	,clickedHelp: function(helpSlug) {
		var parts = helpSlug.split(":");
		var category = parts[0];
		var slug = parts[1];
		var title = slug;
		var text = "";
		var html = "";
		if(category == "ability") {
			var ability = this.database.descriptionsDataset.getAbility(slug);
			title = ability.name;
			text = ability.description;
			if(ability.editor_note != null) {
				text += "\n\n✻ " + ability.editor_note;
			}
		} else if(category == "item") {
			var item = this.database.descriptionsDataset.getItem(slug);
			title = item.name;
			text = item.description;
		} else if(category == "move") {
			var template = $("#moveDescriptionTemplate").html();
			var move = this.database.movesDataset.getMoveStats(slug);
			title = move.name;
			html = visualizer_UI.renderTemplate(template,{ "simple" : move.description, "short" : StringTools.replace(move.effectShort,"$effect_chance%","" + move.effectChance + "%"), "long" : StringTools.replace(move.effectLong,"$effect_chance%","" + move.effectChance + "%"), "note" : move.editorNote});
		} else if(category == "damage") {
			var template1 = $("#moveDamageTemplate").html();
			title = "" + parts[1] + " Damage";
			html = visualizer_UI.renderTemplate(template1,{ min_percent : parts[2], max_percent : parts[3], crit_percent : parts[4], min_points : parts[5], max_points : parts[6], crit_points : parts[7]});
		}
		var jquery = $("#helpDialog");
		if(html != "") {
			jquery.html(html);
		} else if(text != "") {
			jquery.text(text);
		} else {
			text = "(no help available for this item)";
			jquery.text(text);
		}
		jquery.dialog({ maxHeight : window.innerHeight, width : 400});
		var inViewport = jquery.visible();
		if(!inViewport) {
			jquery.dialog({ position : { my : "center top", at : "center top", of : window}});
		}
		jquery.dialog("option","title",title);
	}
	,attachEditListeners: function() {
		var _gthis = this;
		var _g_j;
		var _g_i = 0;
		_g_j = $("[data-edit-slot]");
		while(_g_i < _g_j.length) {
			var element = [$(_g_j[_g_i++])];
			var clickElement = $("<a href=>");
			clickElement.addClass("clickEdit");
			clickElement.click((function(element1) {
				return function(event) {
					var tmp = Std.parseInt(element1[0].attr("data-edit-slot"));
					_gthis.clickedEdit(tmp);
					return false;
				};
			})(element));
			element[0].wrapInner(clickElement);
		}
	}
	,clickedEdit: function(slotNum) {
		var pokemonStats = this.currentPokemon[slotNum];
		var template = $("#pokemonEditTemplate").html();
		var html = visualizer_UI.renderTemplate(template,{ "gender" : this.buildEditGenderRenderDoc(pokemonStats), "type1" : this.buildEditTypeRenderDoc(pokemonStats,0), "type2" : this.buildEditTypeRenderDoc(pokemonStats,1), "ability" : this.buildEditAbilityRenderDoc(pokemonStats), "item" : this.buildEditItemRenderDoc(pokemonStats), "hp" : pokemonStats.hp, "attack" : pokemonStats.attack, "defense" : pokemonStats.defense, "special_attack" : pokemonStats.specialAttack, "special_defense" : pokemonStats.specialDefense, "speed" : pokemonStats.speed, "move1" : this.buildEditMoveRenderDoc(pokemonStats,0), "move2" : this.buildEditMoveRenderDoc(pokemonStats,1), "move3" : this.buildEditMoveRenderDoc(pokemonStats,2), "move4" : this.buildEditMoveRenderDoc(pokemonStats,3)});
		var jquery = $("#editDialog").html(html);
		jquery.dialog({ "maxHeight" : 500});
		var inViewport = jquery.visible();
		if(!inViewport) {
			jquery.dialog({ position : { my : "center top", at : "center top", of : window}});
		}
		this.attachEditFormListeners(slotNum);
		jquery.dialog("option","title","Editing " + pokemonStats.name);
	}
	,buildEditGenderRenderDoc: function(pokemonStats) {
		var genderRenderList = [];
		var _g = 0;
		var _g1 = ["-","m","f"];
		while(_g < _g1.length) {
			var genderSlug = _g1[_g];
			++_g;
			genderRenderList.push({ "slug" : genderSlug, "label" : genderSlug, "selected" : genderSlug == pokemonStats.gender ? "selected" : ""});
		}
		return genderRenderList;
	}
	,buildEditTypeRenderDoc: function(pokemonStats,typeIndex) {
		var renderList = [];
		if(typeIndex == 1) {
			renderList.push({ "slug" : "-", "label" : "-", "selected" : ""});
		}
		var _g = 0;
		var _g1 = this.database.descriptionsDataset.types;
		while(_g < _g1.length) {
			var slug = _g1[_g];
			++_g;
			renderList.push({ "slug" : slug, "label" : slug, "selected" : typeIndex < pokemonStats.types.length && slug == pokemonStats.types[typeIndex] ? "selected" : ""});
		}
		return renderList;
	}
	,buildEditAbilityRenderDoc: function(pokemonStats) {
		var abilityRenderList = [{ "slug" : "", "label" : "-", "selected" : ""}];
		var setList;
		if(pokemonStats.abilitySet != null) {
			setList = HxOverrides.iter(pokemonStats.abilitySet);
		} else {
			setList = this.database.descriptionsDataset.abilities.keys();
		}
		var abilitySlug = setList;
		while(abilitySlug.hasNext()) {
			var abilitySlug1 = abilitySlug.next();
			var tmp = abilitySlug1 == pokemonStats.ability ? "selected" : "";
			abilityRenderList.push({ "slug" : abilitySlug1, "label" : this.database.descriptionsDataset.getAbilityName(abilitySlug1), "selected" : tmp});
		}
		return abilityRenderList;
	}
	,buildEditItemRenderDoc: function(pokemonStats) {
		var itemRenderList = [{ "slug" : "", "label" : "-", "selected" : ""}];
		var setList;
		if(pokemonStats.itemSet != null) {
			setList = HxOverrides.iter(pokemonStats.itemSet);
		} else {
			setList = this.database.descriptionsDataset.items.keys();
		}
		var itemSlug = setList;
		while(itemSlug.hasNext()) {
			var itemSlug1 = itemSlug.next();
			var tmp = itemSlug1 == pokemonStats.item ? "selected" : "";
			itemRenderList.push({ "slug" : itemSlug1, "label" : this.database.descriptionsDataset.getItemName(itemSlug1), "selected" : tmp});
		}
		return itemRenderList;
	}
	,buildEditMoveRenderDoc: function(pokemonStats,slot) {
		var moveRenderList = [{ "slug" : "", "label" : "-", "selected" : ""}];
		var setList;
		if(pokemonStats.itemSet != null && slot <= pokemonStats.moveSets.length - 1) {
			setList = HxOverrides.iter(pokemonStats.moveSets[slot]);
		} else {
			setList = this.database.movesDataset.moves.keys();
		}
		var moveSlug = setList;
		while(moveSlug.hasNext()) {
			var moveSlug1 = moveSlug.next();
			var tmp = moveSlug1 == pokemonStats.moves[slot] ? "selected" : "";
			moveRenderList.push({ "slug" : moveSlug1, "label" : this.database.movesDataset.getMoveStats(moveSlug1).name, "selected" : tmp});
		}
		return moveRenderList;
	}
	,attachEditFormListeners: function(slotNum) {
		var _gthis = this;
		var genderInput = $("#pokemonEditGender");
		var type1Input = $("#pokemonEditType1");
		var type2Input = $("#pokemonEditType2");
		var abilityInput = $("#pokemonEditAbility");
		var itemInput = $("#pokemonEditItem");
		var hpInput = $("#pokemonEditHP");
		var attackInput = $("#pokemonEditAttack");
		var defenseInput = $("#pokemonEditDefense");
		var specialAttackInput = $("#pokemonEditSpecialAttack");
		var specialDefenseInput = $("#pokemonEditSpecialDefense");
		var speedInput = $("#pokemonEditSpeed");
		var move1Input = $("#pokemonEditMove1");
		var move2Input = $("#pokemonEditMove2");
		var move3Input = $("#pokemonEditMove3");
		var move4Input = $("#pokemonEditMove4");
		var readValues = function(event) {
			var pokemonStats = _gthis.currentPokemon[slotNum].copy();
			pokemonStats.gender = genderInput.find("option:selected").attr("name");
			pokemonStats.types = [type1Input.find("option:selected").attr("name")];
			var type2 = type2Input.find("option:selected").attr("name");
			if(type2 != null && type2 != "" && type2 != "-") {
				pokemonStats.types.push(type2);
			}
			pokemonStats.ability = abilityInput.find("option:selected").attr("name");
			pokemonStats.item = itemInput.find("option:selected").attr("name");
			pokemonStats.hp = Std.parseInt(hpInput.val());
			pokemonStats.attack = Std.parseInt(attackInput.val());
			pokemonStats.defense = Std.parseInt(defenseInput.val());
			pokemonStats.specialAttack = Std.parseInt(specialAttackInput.val());
			pokemonStats.specialDefense = Std.parseInt(specialDefenseInput.val());
			pokemonStats.speed = Std.parseInt(speedInput.val());
			var moves = [move1Input.find("option:selected").attr("name"),move2Input.find("option:selected").attr("name"),move3Input.find("option:selected").attr("name"),move4Input.find("option:selected").attr("name")];
			moves = moves.filter(function(item) {
				return item != "";
			});
			pokemonStats.moves = moves;
			_gthis.applyCustomPokemon(pokemonStats,slotNum);
		};
		genderInput.change(readValues);
		type1Input.change(readValues);
		type2Input.change(readValues);
		abilityInput.change(readValues);
		itemInput.change(readValues);
		hpInput.change(readValues);
		attackInput.change(readValues);
		defenseInput.change(readValues);
		specialAttackInput.change(readValues);
		specialDefenseInput.change(readValues);
		speedInput.change(readValues);
		move1Input.change(readValues);
		move2Input.change(readValues);
		move3Input.change(readValues);
		move4Input.change(readValues);
	}
	,applyCustomPokemon: function(pokemonStats,slotNum) {
		var newCustomization = !this.database.isCustomized(pokemonStats.slug);
		if(newCustomization) {
			pokemonStats.slug = "" + pokemonStats.slug + "-custom" + slotNum;
			pokemonStats.movesetName = "Custom " + slotNum;
		}
		this.currentPokemon[slotNum] = pokemonStats;
		this.database.setCustomPokemonStats(pokemonStats.slug,pokemonStats);
		if(newCustomization) {
			this.reloadSelectionList();
			this.syncSelectionListToCurrent();
		}
		this.renderAll(false);
	}
	,renderChart: function() {
		var matchupChart = new visualizer_MatchupChart(this.database,this.formulaOptions);
		matchupChart.setPokemon(this.currentPokemon.slice(0));
		var tableElement = matchupChart.renderTable();
		$("#pokemonDiamond").empty().append(tableElement);
	}
	,attachOptionsListeners: function() {
		var _gthis = this;
		$("#formulaOptions-typeImmunities").change(function(event) {
			var checked = $("#formulaOptions-typeImmunities").prop("checked");
			_gthis.formulaOptions.typeImmunities = checked;
			_gthis.renderAll(false);
		});
	}
	,renderExtraUrls: function() {
		var numbers = this.getMatchNumbers();
		$("#extraUrls").html("\n            View\n            <a href=\"http://www.tppvisuals.com/pbr/visualizer.htm#" + numbers[0] + "-" + numbers[1] + "-" + numbers[2] + "-" + numbers[3] + "-" + numbers[4] + "-" + numbers[5] + "\">\n            Dhason</a> /\n            <a href=\"http://fe1k.de/tpp/visualize#" + numbers[0] + "-" + numbers[1] + "-" + numbers[2] + "-" + numbers[3] + "-" + numbers[4] + "-" + numbers[5] + "\">\n            FelkCraft</a>\n            visualizer\n        ");
	}
	,__class__: visualizer_UI
};
var visualizer_UserMessage = function() {
	this.messageContainer = js_Boot.__cast(window.document.getElementById("messageContainer") , HTMLDivElement);
};
visualizer_UserMessage.__name__ = true;
visualizer_UserMessage.prototype = {
	showMessage: function(text) {
		this.messageContainer.style.display = "block";
		this.messageContainer.textContent = text;
	}
	,hide: function() {
		this.messageContainer.style.display = "none";
	}
	,__class__: visualizer_UserMessage
};
var visualizer_api_APIFacade = function() {
	this.callInProgress = false;
};
visualizer_api_APIFacade.__name__ = true;
visualizer_api_APIFacade.slugify = function(text,noDash) {
	text = StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(text.toLowerCase(),"♀","f"),"♂","m")," ","-"),"é","e");
	if(noDash) {
		text = StringTools.replace(text,"-","");
	}
	var asciiRegex_r = new RegExp("[^a-zA-Z0-9-]","g".split("u").join(""));
	text = text.replace(asciiRegex_r,"");
	return text;
};
visualizer_api_APIFacade.prototype = {
	getCurrentMatch: function(callback) {
		var _gthis = this;
		var successHandler = function(jsonResult,textStatus,xhr) {
			if(Object.prototype.hasOwnProperty.call(jsonResult,"message")) {
				var successHandler1 = Reflect.field(jsonResult,"message");
				callback(false,successHandler1,null);
			} else {
				var pokemonResults;
				try {
					pokemonResults = _gthis.parseMatchPokemon(jsonResult);
				} catch( error ) {
					callback(false,null,null);
					return;
				}
				callback(true,null,pokemonResults);
			}
		};
		var errorHandler = function(xhr1,textStatus1,error1) {
			var jsonResult1 = xhr1.responseJSON;
			if(jsonResult1 != null && Object.prototype.hasOwnProperty.call(jsonResult1,"message")) {
				var errorHandler1 = Reflect.field(jsonResult1,"message");
				callback(false,errorHandler1,null);
			} else {
				callback(false,xhr1.statusText,null);
			}
		};
		this.callAPI(visualizer_api_APIFacade.CURRENT_MATCH_API_URL,successHandler,errorHandler);
	}
	,getPokemonSets: function(callback) {
		var _gthis = this;
		var token;
		var pokemonResults = [];
		var callbackResults = function() {
			_gthis.progressCallback = null;
			callback(true,null,pokemonResults);
		};
		var errorHandler = function(xhr,textStatus,error) {
			_gthis.progressCallback = null;
			var jsonResult = xhr.responseJSON;
			if(jsonResult != null && Object.prototype.hasOwnProperty.call(jsonResult,"message")) {
				var errorHandler1 = Reflect.field(jsonResult,"message");
				callback(false,errorHandler1,null);
			} else {
				callback(false,xhr.statusText,null);
			}
		};
		var cursorErrorHandler = function(xhr1,textStatus1,error1) {
			_gthis.progressCallback = null;
			if(xhr1.status == 410) {
				callbackResults();
			} else {
				errorHandler(xhr1,textStatus1,error1);
			}
		};
		var cursorPaginateSuccessHandler = null;
		cursorPaginateSuccessHandler = function(jsonResult1,textStatus2,xhr2) {
			try {
				var _g = 0;
				var _g1 = _gthis.parseMovesetPokemon(jsonResult1);
				while(_g < _g1.length) {
					var stats = _g1[_g];
					++_g;
					pokemonResults.push(stats);
				}
			} catch( error2 ) {
				callback(false,null,null);
				return;
			}
			_gthis.progressCallback(pokemonResults.length);
			window.setTimeout(function() {
				_gthis.callAPI(visualizer_api_APIFacade.CONSUME_CURSOR_API_URL + token,cursorPaginateSuccessHandler,cursorErrorHandler,true);
			},1);
		};
		var cursorPaginateSuccessHandler1 = cursorPaginateSuccessHandler;
		var cursorCreateSuccessHandler = function(jsonResult2,textStatus3,xhr3) {
			token = jsonResult2;
			window.setTimeout(function() {
				_gthis.callAPI(visualizer_api_APIFacade.CONSUME_CURSOR_API_URL + token,cursorPaginateSuccessHandler1,cursorErrorHandler,true);
			},1);
		};
		this.callAPI(visualizer_api_APIFacade.POKEMON_SETS_API_URL + "&create_cursor=true",cursorCreateSuccessHandler,errorHandler);
	}
	,callAPI: function(url,done,error,post) {
		var _gthis = this;
		if(this.callInProgress) {
			throw new js__$Boot_HaxeError("Call already in progress");
		}
		this.callInProgress = true;
		var xhr;
		if(!post) {
			xhr = $.getJSON(url);
		} else {
			xhr = $.post(url,"Kappa",null,"json");
		}
		xhr.done(done).fail(error).always(function() {
			_gthis.callInProgress = false;
		});
	}
	,parseMatchPokemon: function(jsonDoc) {
		var teams = Reflect.field(jsonDoc,"teams");
		var teamBlue = teams[0];
		var teamRed = teams[1];
		var pokemonStats = [];
		var _g = 0;
		while(_g < teamBlue.length) {
			var pokemonDoc = teamBlue[_g];
			++_g;
			var stats = new visualizer_datastruct_MovesetPokemonStats();
			this.parsePokemonStats(pokemonDoc,stats);
			pokemonStats.push(stats);
		}
		var _g1 = 0;
		while(_g1 < teamRed.length) {
			var pokemonDoc1 = teamRed[_g1];
			++_g1;
			var stats1 = new visualizer_datastruct_MovesetPokemonStats();
			this.parsePokemonStats(pokemonDoc1,stats1);
			pokemonStats.push(stats1);
		}
		return pokemonStats;
	}
	,parseMovesetPokemon: function(jsonDoc) {
		var movesetInfoDoc = jsonDoc;
		var statsList = [];
		var _g = 0;
		while(_g < movesetInfoDoc.length) {
			var entryInfoDoc = movesetInfoDoc[_g];
			++_g;
			var statsDoc = Reflect.field(entryInfoDoc,"data");
			var stats = new visualizer_datastruct_MovesetPokemonStats();
			this.parseMovesetPokemonStats(statsDoc,stats);
			statsList.push(stats);
		}
		return statsList;
	}
	,parseCommonPokemonStats: function(jsonDoc,stats) {
		var speciesId = Reflect.field(Reflect.field(jsonDoc,"species"),"id");
		var effectiveStats = Reflect.field(jsonDoc,"stats");
		stats.name = Reflect.field(Reflect.field(jsonDoc,"species"),"name");
		stats.nickname = Reflect.field(jsonDoc,"ingamename");
		stats.attack = Reflect.field(effectiveStats,"atk");
		stats.defense = Reflect.field(effectiveStats,"def");
		stats.gender = Reflect.field(jsonDoc,"gender");
		stats.happiness = Reflect.field(jsonDoc,"happiness");
		stats.hp = Reflect.field(effectiveStats,"hp");
		if(Object.prototype.hasOwnProperty.call(jsonDoc,"nature") && Reflect.field(jsonDoc,"nature") != null) {
			stats.nature = visualizer_api_APIFacade.slugify(Reflect.field(Reflect.field(jsonDoc,"nature"),"name"));
		}
		stats.number = speciesId;
		stats.specialAttack = Reflect.field(effectiveStats,"spA");
		stats.specialDefense = Reflect.field(effectiveStats,"spD");
		stats.speed = Reflect.field(effectiveStats,"spe");
	}
	,parsePokemonStats: function(jsonDoc,stats) {
		this.parseCommonPokemonStats(jsonDoc,stats);
		if(Object.prototype.hasOwnProperty.call(jsonDoc,"ability") && Reflect.field(jsonDoc,"ability") != null) {
			var rawName = Reflect.field(Reflect.field(jsonDoc,"ability"),"name");
			if(rawName != null) {
				stats.ability = visualizer_api_APIFacade.slugify(rawName);
			}
		}
		if(Object.prototype.hasOwnProperty.call(jsonDoc,"item") && Reflect.field(jsonDoc,"item") != null) {
			var rawName1 = Reflect.field(Reflect.field(jsonDoc,"item"),"name");
			if(rawName1 != null) {
				stats.item = visualizer_api_APIFacade.slugify(rawName1);
			}
		}
		stats.moves = [];
		var moveDocList = Reflect.field(jsonDoc,"moves");
		var _g = 0;
		while(_g < moveDocList.length) {
			var moveDoc = moveDocList[_g];
			++_g;
			var moveSlug = visualizer_api_APIFacade.slugify(Reflect.field(moveDoc,"name"));
			stats.moves.push(moveSlug);
			if(moveSlug == "hidden-power") {
				stats.moveTypeOverride = visualizer_api_APIFacade.slugify(Reflect.field(moveDoc,"type"));
			}
		}
	}
	,parseMovesetPokemonStats: function(jsonDoc,stats) {
		this.parseCommonPokemonStats(jsonDoc,stats);
		var abilitiesDoc = Reflect.field(jsonDoc,"ability");
		var itemsDoc = Reflect.field(jsonDoc,"item");
		var movesDoc = Reflect.field(jsonDoc,"moves");
		var genders = Reflect.field(jsonDoc,"gender");
		stats.movesetName = Reflect.field(jsonDoc,"setname");
		stats.gender = null;
		stats.genderSet = [];
		var _g = 0;
		while(_g < genders.length) {
			var gender = genders[_g];
			++_g;
			if(gender != null) {
				stats.genderSet.push(gender);
			}
		}
		var _g1 = 0;
		while(_g1 < abilitiesDoc.length) {
			var doc = abilitiesDoc[_g1];
			++_g1;
			var rawName = Reflect.field(doc,"name");
			if(rawName != null) {
				stats.abilitySet.push(visualizer_api_APIFacade.slugify(rawName));
			}
		}
		var _g2 = 0;
		while(_g2 < itemsDoc.length) {
			var doc1 = itemsDoc[_g2];
			++_g2;
			var rawName1 = Reflect.field(doc1,"name");
			if(rawName1 != null) {
				stats.itemSet.push(visualizer_api_APIFacade.slugify(rawName1));
			}
		}
		var _g3 = 0;
		while(_g3 < movesDoc.length) {
			var slotDoc = movesDoc[_g3];
			++_g3;
			var slotMoves = [];
			var _g11 = 0;
			while(_g11 < slotDoc.length) {
				var moveDoc = slotDoc[_g11];
				++_g11;
				var moveSlug = visualizer_api_APIFacade.slugify(Reflect.field(moveDoc,"name"));
				slotMoves.push(moveSlug);
				if(moveSlug == "hidden-power") {
					stats.moveTypeOverride = visualizer_api_APIFacade.slugify(Reflect.field(moveDoc,"type"));
				}
			}
			stats.moveSets.push(slotMoves);
		}
	}
	,__class__: visualizer_api_APIFacade
};
var visualizer_dataset_StorageEmpty = function() {
};
visualizer_dataset_StorageEmpty.__name__ = true;
visualizer_dataset_StorageEmpty.prototype = {
	__class__: visualizer_dataset_StorageEmpty
};
var visualizer_dataset_DatasetLoadable = function() { };
visualizer_dataset_DatasetLoadable.__name__ = true;
visualizer_dataset_DatasetLoadable.prototype = {
	__class__: visualizer_dataset_DatasetLoadable
};
var visualizer_dataset_Dataset = function() {
};
visualizer_dataset_Dataset.__name__ = true;
visualizer_dataset_Dataset.__interfaces__ = [visualizer_dataset_DatasetLoadable];
visualizer_dataset_Dataset.prototype = {
	load: function(callback) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,makeRequest: function(url,callback) {
		this.callback = callback;
		$.getJSON(url).done($bind(this,this.loadDone)).fail($bind(this,this.loadFailed));
	}
	,loadDone: function(data) {
		this.callback(new visualizer_dataset_LoadEvent(true));
	}
	,loadFailed: function(xhr,textStatus,error) {
		this.callback(new visualizer_dataset_LoadEvent(false,"" + textStatus + ": " + xhr.status + " " + xhr.statusText));
	}
	,__class__: visualizer_dataset_Dataset
};
var visualizer_dataset_APIPokemonDataset = function() {
	visualizer_dataset_Dataset.call(this);
	this.slugs = [];
	this.stats = new haxe_ds_StringMap();
	this.speciesIdToSlugMap = new haxe_ds_IntMap();
	this.apiFacade = new visualizer_api_APIFacade();
};
visualizer_dataset_APIPokemonDataset.__name__ = true;
visualizer_dataset_APIPokemonDataset.__super__ = visualizer_dataset_Dataset;
visualizer_dataset_APIPokemonDataset.prototype = $extend(visualizer_dataset_Dataset.prototype,{
	isLoaded: function() {
		return this.slugs.length != 0;
	}
	,load: function(callback) {
		var _gthis = this;
		this.slugs = [];
		this.stats = new haxe_ds_StringMap();
		this.apiFacade.getPokemonSets(function(success,errorMessage,pokemonStatsList) {
			if(success) {
				_gthis.loadPokemon(pokemonStatsList);
			}
			callback(new visualizer_dataset_LoadEvent(success,errorMessage));
		});
	}
	,getPokemonStats: function(slug) {
		var _this = this.stats;
		if(__map_reserved[slug] != null) {
			return _this.getReserved(slug);
		} else {
			return _this.h[slug];
		}
	}
	,getSlug: function(pokemonNum,movesetName) {
		if(this.speciesIdToSlugMap.h.hasOwnProperty(pokemonNum)) {
			var slugs = this.speciesIdToSlugMap.h[pokemonNum];
			if(movesetName != null) {
				var slugSuffix = visualizer_api_APIFacade.slugify(movesetName);
				var _g = 0;
				while(_g < slugs.length) {
					var slug = slugs[_g];
					++_g;
					if(StringTools.endsWith(slug,slugSuffix)) {
						return slug;
					}
				}
			} else {
				return slugs[0];
			}
		}
		throw new js__$Boot_HaxeError(new visualizer_dataset_DatasetItemNotFoundError());
	}
	,loadPokemon: function(pokemonStatsList) {
		var _g = 0;
		while(_g < pokemonStatsList.length) {
			var pokemonStats = pokemonStatsList[_g];
			++_g;
			pokemonStats.slug = visualizer_api_APIFacade.slugify(pokemonStats.name + "-" + pokemonStats.movesetName);
			this.slugs.push(pokemonStats.slug);
			var key = pokemonStats.slug;
			var _this = this.stats;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,pokemonStats);
			} else {
				_this.h[key] = pokemonStats;
			}
		}
		this.buildSpeciesIdSlugMap();
	}
	,loadFromStorage: function() {
		var versionStr = window.localStorage.getItem("" + visualizer_dataset_APIPokemonDataset.STORAGE_KEY + ":version");
		if(versionStr == null) {
			throw new js__$Boot_HaxeError(new visualizer_dataset_StorageEmpty());
		}
		var version = JSON.parse(versionStr);
		if(version < visualizer_dataset_APIPokemonDataset.MIN_STORAGE_VERSION) {
			throw new js__$Boot_HaxeError(new visualizer_dataset_StorageEmpty());
		}
		var slugs = JSON.parse(window.localStorage.getItem("" + visualizer_dataset_APIPokemonDataset.STORAGE_KEY + ":slugs"));
		if(slugs == null) {
			throw new js__$Boot_HaxeError(new visualizer_dataset_StorageEmpty());
		}
		var _g = 0;
		while(_g < slugs.length) {
			var slug = slugs[_g];
			++_g;
			var jsonStr = window.localStorage.getItem("" + visualizer_dataset_APIPokemonDataset.STORAGE_KEY + ":pokemon:" + slug);
			if(jsonStr == null) {
				haxe_Log.trace(jsonStr,{ fileName : "APIPokemonDataset.hx", lineNumber : 112, className : "visualizer.dataset.APIPokemonDataset", methodName : "loadFromStorage", customParams : ["not found in storage. corrupted?"]});
				throw new js__$Boot_HaxeError(new visualizer_dataset_StorageEmpty());
			}
			var pokemonStats = new visualizer_datastruct_MovesetPokemonStats();
			pokemonStats.fromJsonObject(JSON.parse(jsonStr));
			var _this = this.stats;
			if(__map_reserved[slug] != null) {
				_this.setReserved(slug,pokemonStats);
			} else {
				_this.h[slug] = pokemonStats;
			}
		}
		this.slugs = slugs;
		this.buildSpeciesIdSlugMap();
	}
	,saveToStorage: function() {
		var slug = this.stats.keys();
		while(slug.hasNext()) {
			var slug1 = slug.next();
			var _this = this.stats;
			var pokemonStats = __map_reserved[slug1] != null ? _this.getReserved(slug1) : _this.h[slug1];
			window.localStorage.setItem("" + visualizer_dataset_APIPokemonDataset.STORAGE_KEY + ":pokemon:" + slug1,JSON.stringify(pokemonStats.toJsonObject()));
		}
		window.localStorage.setItem("" + visualizer_dataset_APIPokemonDataset.STORAGE_KEY + ":slugs",JSON.stringify(this.slugs));
		window.localStorage.setItem("" + visualizer_dataset_APIPokemonDataset.STORAGE_KEY + ":version",JSON.stringify(visualizer_dataset_APIPokemonDataset.STORAGE_VERISON));
	}
	,clearStorage: function() {
		var deleteKeys = [];
		var _g1 = 0;
		var _g = window.localStorage.length;
		while(_g1 < _g) {
			var i = _g1++;
			var key = window.localStorage.key(i);
			if(StringTools.startsWith(key,visualizer_dataset_APIPokemonDataset.STORAGE_KEY)) {
				deleteKeys.push(key);
			}
		}
		var _g2 = 0;
		while(_g2 < deleteKeys.length) {
			var key1 = deleteKeys[_g2];
			++_g2;
			window.localStorage.removeItem(key1);
		}
	}
	,buildSpeciesIdSlugMap: function() {
		var _this = this.stats;
		var pokemonStats = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(pokemonStats.hasNext()) {
			var pokemonStats1 = pokemonStats.next();
			if(!this.speciesIdToSlugMap.h.hasOwnProperty(pokemonStats1.number)) {
				var this1 = this.speciesIdToSlugMap;
				var key = pokemonStats1.number;
				var value = [];
				this1.h[key] = value;
			}
			this.speciesIdToSlugMap.h[pokemonStats1.number].push(pokemonStats1.slug);
		}
	}
	,__class__: visualizer_dataset_APIPokemonDataset
});
var visualizer_dataset_CurrentMatchDataset = function() {
	this.apiFacade = new visualizer_api_APIFacade();
};
visualizer_dataset_CurrentMatchDataset.__name__ = true;
visualizer_dataset_CurrentMatchDataset.__interfaces__ = [visualizer_dataset_DatasetLoadable];
visualizer_dataset_CurrentMatchDataset.prototype = {
	load: function(callback) {
		var _gthis = this;
		this.apiFacade.getCurrentMatch(function(success,errorMessage,pokemonStatsList) {
			if(success) {
				_gthis.pokemonStatsList = pokemonStatsList;
				_gthis.slugs = [];
				var _g = 0;
				while(_g < pokemonStatsList.length) {
					var stats = pokemonStatsList[_g];
					++_g;
					stats.slug = visualizer_api_APIFacade.slugify("" + stats.name + "-current");
					stats.movesetName = "Current";
					_gthis.slugs.push(stats.slug);
				}
			} else {
				_gthis.pokemonStatsList = null;
			}
			callback(new visualizer_dataset_LoadEvent(success,errorMessage));
		});
	}
	,getPokemonStats: function(slug) {
		var _g = 0;
		var _g1 = this.pokemonStatsList;
		while(_g < _g1.length) {
			var stats = _g1[_g];
			++_g;
			if(stats.slug == slug) {
				return stats;
			}
		}
		throw new js__$Boot_HaxeError("Not found");
	}
	,__class__: visualizer_dataset_CurrentMatchDataset
};
var visualizer_dataset_DatasetItemNotFoundError = function() {
};
visualizer_dataset_DatasetItemNotFoundError.__name__ = true;
visualizer_dataset_DatasetItemNotFoundError.prototype = {
	__class__: visualizer_dataset_DatasetItemNotFoundError
};
var visualizer_dataset_LoadEvent = function(success,errorMessage) {
	this.success = success;
	this.errorMessage = errorMessage;
};
visualizer_dataset_LoadEvent.__name__ = true;
visualizer_dataset_LoadEvent.prototype = {
	__class__: visualizer_dataset_LoadEvent
};
var visualizer_dataset_DescriptionsDataset = function() {
	visualizer_dataset_Dataset.call(this);
	this.dashlessSlugMap = new haxe_ds_StringMap();
	this.types = [];
};
visualizer_dataset_DescriptionsDataset.__name__ = true;
visualizer_dataset_DescriptionsDataset.__super__ = visualizer_dataset_Dataset;
visualizer_dataset_DescriptionsDataset.prototype = $extend(visualizer_dataset_Dataset.prototype,{
	load: function(callback) {
		this.makeRequest("descriptions.json",callback);
	}
	,loadDone: function(data) {
		this.abilities = new haxe_ds_StringMap();
		var abilitiesDoc = Reflect.field(data,"abilities");
		var _g = 0;
		var _g1 = Reflect.fields(abilitiesDoc);
		while(_g < _g1.length) {
			var slug = _g1[_g];
			++_g;
			var this1 = this.abilities;
			var value = Reflect.field(abilitiesDoc,slug);
			var _this = this1;
			if(__map_reserved[slug] != null) {
				_this.setReserved(slug,value);
			} else {
				_this.h[slug] = value;
			}
		}
		this.types_efficacy = new haxe_ds_StringMap();
		var typesDoc = Reflect.field(data,"types_efficacy");
		var _g2 = 0;
		var _g11 = Reflect.fields(typesDoc);
		while(_g2 < _g11.length) {
			var firstType = _g11[_g2];
			++_g2;
			this.types.push(firstType);
			var secondTypesDoc = Reflect.field(typesDoc,firstType);
			var _g21 = 0;
			var _g3 = Reflect.fields(secondTypesDoc);
			while(_g21 < _g3.length) {
				var secondType = _g3[_g21];
				++_g21;
				var efficacy = Reflect.field(secondTypesDoc,secondType);
				var _this1 = this.types_efficacy;
				var key = "" + firstType + "*" + secondType;
				if(__map_reserved[key] != null) {
					_this1.setReserved(key,efficacy);
				} else {
					_this1.h[key] = efficacy;
				}
			}
		}
		this.items = new haxe_ds_StringMap();
		var itemsDoc = Reflect.field(data,"items");
		var _g4 = 0;
		var _g12 = Reflect.fields(itemsDoc);
		while(_g4 < _g12.length) {
			var slug1 = _g12[_g4];
			++_g4;
			var this2 = this.items;
			var value1 = Reflect.field(itemsDoc,slug1);
			var _this2 = this2;
			if(__map_reserved[slug1] != null) {
				_this2.setReserved(slug1,value1);
			} else {
				_this2.h[slug1] = value1;
			}
		}
		this.buildDashlessSlugMap();
		visualizer_dataset_Dataset.prototype.loadDone.call(this,data);
	}
	,getAbility: function(slug) {
		var _this = this.abilities;
		if(!(__map_reserved[slug] != null ? _this.existsReserved(slug) : _this.h.hasOwnProperty(slug))) {
			var _this1 = this.dashlessSlugMap;
			if(__map_reserved[slug] != null) {
				slug = _this1.getReserved(slug);
			} else {
				slug = _this1.h[slug];
			}
		}
		var _this2 = this.abilities;
		if(__map_reserved[slug] != null) {
			return _this2.getReserved(slug);
		} else {
			return _this2.h[slug];
		}
	}
	,getAbilityName: function(slug) {
		return this.getAbility(slug).name;
	}
	,getItem: function(slug) {
		var _this = this.items;
		if(!(__map_reserved[slug] != null ? _this.existsReserved(slug) : _this.h.hasOwnProperty(slug))) {
			var _this1 = this.dashlessSlugMap;
			if(__map_reserved[slug] != null) {
				slug = _this1.getReserved(slug);
			} else {
				slug = _this1.h[slug];
			}
		}
		var _this2 = this.items;
		if(__map_reserved[slug] != null) {
			return _this2.getReserved(slug);
		} else {
			return _this2.h[slug];
		}
	}
	,getItemName: function(slug) {
		var _this = this.items;
		if(!(__map_reserved[slug] != null ? _this.existsReserved(slug) : _this.h.hasOwnProperty(slug))) {
			var _this1 = this.dashlessSlugMap;
			if(__map_reserved[slug] != null) {
				slug = _this1.getReserved(slug);
			} else {
				slug = _this1.h[slug];
			}
		}
		var _this2 = this.items;
		return (__map_reserved[slug] != null ? _this2.getReserved(slug) : _this2.h[slug]).name;
	}
	,getTypeEfficacy: function(user,foe,foeSecondary) {
		var _this = this.types_efficacy;
		var key = "" + user + "*" + foe;
		var efficacy = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(foeSecondary == null) {
			return efficacy;
		}
		var _this1 = this.types_efficacy;
		var key1 = "" + user + "*" + foeSecondary;
		var secondaryEfficacy = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
		var pair_0 = efficacy;
		var pair_1 = secondaryEfficacy;
		switch(pair_0) {
		case 0:
			return 0;
		case 50:
			switch(pair_1) {
			case 0:
				return 0;
			case 50:
				return 25;
			case 100:
				return 50;
			case 200:
				return 100;
			default:
				return 100;
			}
			break;
		case 100:
			switch(pair_1) {
			case 0:
				return 0;
			case 50:
				return 50;
			case 200:
				return 200;
			default:
				return 100;
			}
			break;
		case 200:
			switch(pair_1) {
			case 0:
				return 0;
			case 50:
				return 100;
			case 100:
				return 200;
			case 200:
				return 400;
			default:
				return 100;
			}
			break;
		default:
			if(pair_1 == 0) {
				return 0;
			} else {
				return 100;
			}
		}
	}
	,buildDashlessSlugMap: function() {
		var key = this.items.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var this1 = this.dashlessSlugMap;
			var key2 = visualizer_api_APIFacade.slugify(key1,true);
			var _this = this1;
			if(__map_reserved[key2] != null) {
				_this.setReserved(key2,key1);
			} else {
				_this.h[key2] = key1;
			}
		}
		var key3 = this.abilities.keys();
		while(key3.hasNext()) {
			var key4 = key3.next();
			var this2 = this.dashlessSlugMap;
			var key5 = visualizer_api_APIFacade.slugify(key4,true);
			var _this1 = this2;
			if(__map_reserved[key5] != null) {
				_this1.setReserved(key5,key4);
			} else {
				_this1.h[key5] = key4;
			}
		}
	}
	,__class__: visualizer_dataset_DescriptionsDataset
});
var visualizer_dataset_MovesDataset = function() {
	visualizer_dataset_Dataset.call(this);
};
visualizer_dataset_MovesDataset.__name__ = true;
visualizer_dataset_MovesDataset.__super__ = visualizer_dataset_Dataset;
visualizer_dataset_MovesDataset.prototype = $extend(visualizer_dataset_Dataset.prototype,{
	load: function(callback) {
		this.makeRequest("moves.json",callback);
	}
	,loadDone: function(data) {
		this.moves = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var slug = _g1[_g];
			++_g;
			var moveStats = new visualizer_datastruct_MoveStats(slug);
			moveStats.fromJsonObject(Reflect.field(data,slug));
			var _this = this.moves;
			if(__map_reserved[slug] != null) {
				_this.setReserved(slug,moveStats);
			} else {
				_this.h[slug] = moveStats;
			}
		}
		visualizer_dataset_Dataset.prototype.loadDone.call(this,data);
	}
	,getMoveStats: function(slug,pokemonStat) {
		var _this = this.moves;
		var moveStat = (__map_reserved[slug] != null ? _this.getReserved(slug) : _this.h[slug]).copy();
		if(pokemonStat != null && slug == "hidden-power" && pokemonStat.moveTypeOverride != null) {
			moveStat.moveType = pokemonStat.moveTypeOverride;
		}
		return moveStat;
	}
	,__class__: visualizer_dataset_MovesDataset
});
var visualizer_dataset_PokemonDataset = function() {
	this.datasetIndex = 0;
	visualizer_dataset_Dataset.call(this);
	this.datasets = [];
	this.speciesIdToSlugMap = new haxe_ds_IntMap();
};
visualizer_dataset_PokemonDataset.__name__ = true;
visualizer_dataset_PokemonDataset.__super__ = visualizer_dataset_Dataset;
visualizer_dataset_PokemonDataset.prototype = $extend(visualizer_dataset_Dataset.prototype,{
	load: function(callback) {
		this.datasetIndex = 0;
		this.loadOneDataset(callback);
	}
	,loadOneDataset: function(originalCallback) {
		var _gthis = this;
		var filename = visualizer_dataset_PokemonDataset.DATASET_FILES[this.datasetIndex];
		this.makeRequest(filename,function(loadEvent) {
			if(loadEvent.success) {
				_gthis.datasetIndex += 1;
				if(_gthis.datasetIndex < visualizer_dataset_PokemonDataset.DATASET_FILES.length) {
					_gthis.loadOneDataset(originalCallback);
				} else {
					if(visualizer_dataset_PokemonDataset.DEFAULT_INDEX >= 0) {
						_gthis.datasetIndex = visualizer_dataset_PokemonDataset.DEFAULT_INDEX;
					} else {
						_gthis.datasetIndex -= 1;
					}
					originalCallback(loadEvent);
				}
			} else {
				originalCallback(loadEvent);
			}
		});
	}
	,loadDone: function(data) {
		var slugs = Reflect.field(data,"pokemon_slugs");
		var statsDoc = Reflect.field(data,"stats");
		var stats = new haxe_ds_StringMap();
		var _g = 0;
		while(_g < slugs.length) {
			var slug = slugs[_g];
			++_g;
			var pokemonStats = new visualizer_datastruct_PokemonStats(slug);
			pokemonStats.fromJsonObject(Reflect.field(statsDoc,slug));
			if(__map_reserved[slug] != null) {
				stats.setReserved(slug,pokemonStats);
			} else {
				stats.h[slug] = pokemonStats;
			}
			this.speciesIdToSlugMap.h[pokemonStats.number] = slug;
		}
		var datasetDoc = { slugs : slugs, stats : stats};
		this.datasets.push(datasetDoc);
		visualizer_dataset_Dataset.prototype.loadDone.call(this,data);
	}
	,get_slugs: function() {
		return this.datasets[this.datasetIndex].slugs;
	}
	,get_stats: function() {
		return this.datasets[this.datasetIndex].stats;
	}
	,getPokemonStats: function(slug) {
		var _this = this.get_stats();
		if(!(__map_reserved[slug] != null ? _this.existsReserved(slug) : _this.h.hasOwnProperty(slug))) {
			throw new js__$Boot_HaxeError(new visualizer_dataset_DatasetItemNotFoundError());
		}
		var pokemonStat = new visualizer_datastruct_PokemonStats();
		pokemonStat.slug = slug;
		var _this1 = this.get_stats();
		pokemonStat.update(__map_reserved[slug] != null ? _this1.getReserved(slug) : _this1.h[slug]);
		return pokemonStat;
	}
	,getSlug: function(pokemonNum) {
		if(this.speciesIdToSlugMap.h.hasOwnProperty(pokemonNum)) {
			return this.speciesIdToSlugMap.h[pokemonNum];
		}
		throw new js__$Boot_HaxeError(new visualizer_dataset_DatasetItemNotFoundError());
	}
	,__class__: visualizer_dataset_PokemonDataset
});
var visualizer_datastruct_Copyable = function() { };
visualizer_datastruct_Copyable.__name__ = true;
visualizer_datastruct_Copyable.prototype = {
	__class__: visualizer_datastruct_Copyable
};
var visualizer_datastruct_MoveStats = function(slug) {
	this.slug = slug;
};
visualizer_datastruct_MoveStats.__name__ = true;
visualizer_datastruct_MoveStats.__interfaces__ = [visualizer_datastruct_Copyable];
visualizer_datastruct_MoveStats.prototype = {
	fromJsonObject: function(doc) {
		this.accuracy = Reflect.field(doc,"accuracy");
		this.damageCategory = Reflect.field(doc,"damage_category");
		this.description = Reflect.field(doc,"description");
		this.editorNote = Reflect.field(doc,"editor_note");
		this.effectChance = Reflect.field(doc,"effect_chance");
		this.effectShort = Reflect.field(doc,"effect_short");
		this.effectLong = Reflect.field(doc,"effect_long");
		this.maxHits = Reflect.field(doc,"max_hits");
		this.minHits = Reflect.field(doc,"min_hits");
		this.moveType = Reflect.field(doc,"move_type");
		this.name = Reflect.field(doc,"name");
		this.power = Reflect.field(doc,"power");
		this.pp = Reflect.field(doc,"pp");
		this.priority = Reflect.field(doc,"priority");
		if(Object.prototype.hasOwnProperty.call(doc,"slug")) {
			this.slug = Reflect.field(doc,"slug");
		}
	}
	,toJsonObject: function() {
		return { "slug" : this.slug, "accuracy" : this.accuracy, "damage_category" : this.damageCategory, "description" : this.description, "editor_note" : this.editorNote, "effect_chance" : this.effectChance, "effect_short" : this.effectShort, "effect_long" : this.effectLong, "max_hits" : this.maxHits, "min_hits" : this.minHits, "move_type" : this.moveType, "name" : this.name, "power" : this.power, "pp" : this.pp, "priority" : this.priority};
	}
	,copy: function() {
		var stats = new visualizer_datastruct_MoveStats();
		stats.fromJsonObject(this.toJsonObject());
		return stats;
	}
	,__class__: visualizer_datastruct_MoveStats
};
var visualizer_datastruct_PokemonStats = function(slug) {
	this.slug = slug;
};
visualizer_datastruct_PokemonStats.__name__ = true;
visualizer_datastruct_PokemonStats.__interfaces__ = [visualizer_datastruct_Copyable];
visualizer_datastruct_PokemonStats.prototype = {
	fromJsonObject: function(doc) {
		if(Object.prototype.hasOwnProperty.call(doc,"slug")) {
			this.slug = Reflect.field(doc,"slug");
		}
		this.ability = Reflect.field(doc,"ability");
		this.attack = Reflect.field(doc,"attack");
		this.defense = Reflect.field(doc,"defense");
		this.gender = Reflect.field(doc,"gender");
		this.happiness = Reflect.field(doc,"happiness");
		this.hp = Reflect.field(doc,"hp");
		this.item = Reflect.field(doc,"item");
		this.iv = Reflect.field(doc,"iv");
		this.moveTypeOverride = Reflect.field(doc,"move_type_override");
		this.moves = Reflect.field(doc,"moves");
		this.name = Reflect.field(doc,"name");
		this.nature = Reflect.field(doc,"nature");
		this.nickname = Reflect.field(doc,"nickname");
		this.number = Reflect.field(doc,"number");
		this.specialAttack = Reflect.field(doc,"special_attack");
		this.specialDefense = Reflect.field(doc,"special_defense");
		this.speed = Reflect.field(doc,"speed");
		this.types = Reflect.field(doc,"types");
		this.weight = Reflect.field(doc,"weight");
	}
	,toJsonObject: function() {
		return { "slug" : this.slug, "ability" : this.ability, "attack" : this.attack, "defense" : this.defense, "gender" : this.gender, "happiness" : this.happiness, "hp" : this.hp, "item" : this.item, "iv" : this.iv, "move_type_override" : this.moveTypeOverride, "moves" : this.moves, "name" : this.name, "nature" : this.nature, "nickname" : this.nickname, "number" : this.number, "special_attack" : this.specialAttack, "special_defense" : this.specialDefense, "speed" : this.speed, "types" : this.types, "weight" : this.weight};
	}
	,copy: function() {
		var stat = new visualizer_datastruct_PokemonStats();
		stat.update(this);
		return stat;
	}
	,update: function(other) {
		this.fromJsonObject(other.toJsonObject());
	}
	,__class__: visualizer_datastruct_PokemonStats
};
var visualizer_datastruct_MovesetPokemonStats = function(slug) {
	visualizer_datastruct_PokemonStats.call(this,slug);
	this.abilitySet = [];
	this.itemSet = [];
	this.moveSets = [];
};
visualizer_datastruct_MovesetPokemonStats.__name__ = true;
visualizer_datastruct_MovesetPokemonStats.__super__ = visualizer_datastruct_PokemonStats;
visualizer_datastruct_MovesetPokemonStats.prototype = $extend(visualizer_datastruct_PokemonStats.prototype,{
	fillDefaultSets: function() {
		if(this.ability == null && this.abilitySet != null && this.abilitySet.length > 0) {
			this.ability = this.abilitySet[0];
		}
		if(this.gender == null && this.genderSet != null && this.genderSet.length > 0) {
			this.gender = this.genderSet[0];
		}
		if(this.item == null && this.itemSet != null && this.itemSet.length > 0) {
			this.item = this.itemSet[0];
		}
		if((this.moves == null || this.moves != null && this.moves.length == 0) && this.moveSets != null) {
			this.moves = [];
			var _g = 0;
			var _g1 = this.moveSets;
			while(_g < _g1.length) {
				var slotMovesSet = _g1[_g];
				++_g;
				this.moves.push(slotMovesSet[0]);
			}
		}
	}
	,fromJsonObject: function(doc) {
		visualizer_datastruct_PokemonStats.prototype.fromJsonObject.call(this,doc);
		this.abilitySet = Reflect.field(doc,"ability_set");
		this.genderSet = Reflect.field(doc,"gender_set");
		this.itemSet = Reflect.field(doc,"item_set");
		this.moveSets = Reflect.field(doc,"move_sets");
		this.movesetName = Reflect.field(doc,"set_name");
	}
	,toJsonObject: function() {
		var doc = visualizer_datastruct_PokemonStats.prototype.toJsonObject.call(this);
		doc["ability_set"] = this.abilitySet;
		doc["gender_set"] = this.genderSet;
		doc["item_set"] = this.itemSet;
		doc["move_sets"] = this.moveSets;
		doc["set_name"] = this.movesetName;
		return doc;
	}
	,copy: function() {
		var stat = new visualizer_datastruct_MovesetPokemonStats();
		stat.update(this);
		return stat;
	}
	,__class__: visualizer_datastruct_MovesetPokemonStats
});
var visualizer_datastruct_VisualizerPokemonStats = function(slug) {
	visualizer_datastruct_MovesetPokemonStats.call(this,slug);
};
visualizer_datastruct_VisualizerPokemonStats.__name__ = true;
visualizer_datastruct_VisualizerPokemonStats.__super__ = visualizer_datastruct_MovesetPokemonStats;
visualizer_datastruct_VisualizerPokemonStats.prototype = $extend(visualizer_datastruct_MovesetPokemonStats.prototype,{
	fromJsonObject: function(doc) {
		visualizer_datastruct_MovesetPokemonStats.prototype.fromJsonObject.call(this,doc);
	}
	,toJsonObject: function() {
		var doc = visualizer_datastruct_MovesetPokemonStats.prototype.toJsonObject.call(this);
		return doc;
	}
	,copy: function() {
		var stat = new visualizer_datastruct_VisualizerPokemonStats();
		stat.update(this);
		return stat;
	}
	,__class__: visualizer_datastruct_VisualizerPokemonStats
});
var visualizer_model_StatsNotFoundError = function() {
};
visualizer_model_StatsNotFoundError.__name__ = true;
visualizer_model_StatsNotFoundError.prototype = {
	__class__: visualizer_model_StatsNotFoundError
};
var visualizer_model_PokemonDatabase = function(pokemonDataset,apiPokemonDataset,movesDataset,descriptionsDataset) {
	this.pokemonDataset = pokemonDataset;
	this.apiPokemonDataset = apiPokemonDataset;
	this.movesDataset = movesDataset;
	this.descriptionsDataset = descriptionsDataset;
	this.currentMatchDataset = new visualizer_dataset_CurrentMatchDataset();
	this.customStats = new haxe_ds_StringMap();
	this.setEdition(visualizer_dataset_PokemonDataset.DATASET_NAMES[0]);
};
visualizer_model_PokemonDatabase.__name__ = true;
visualizer_model_PokemonDatabase.prototype = {
	getEditionNames: function() {
		return visualizer_dataset_PokemonDataset.DATASET_NAMES.concat([visualizer_model_PokemonDatabase.API_EDITION]);
	}
	,getEdition: function() {
		return this.edition;
	}
	,getLastStaticEdition: function() {
		return visualizer_dataset_PokemonDataset.DATASET_NAMES[visualizer_dataset_PokemonDataset.DEFAULT_INDEX];
	}
	,setEdition: function(name) {
		this.edition = name;
		var editionIndex = visualizer_dataset_PokemonDataset.DATASET_NAMES.indexOf(name);
		if(editionIndex >= 0) {
			this.pokemonDataset.datasetIndex = editionIndex;
		}
	}
	,getPokemonSlugs: function() {
		var slugs;
		if(this.edition == visualizer_model_PokemonDatabase.API_EDITION) {
			slugs = this.apiPokemonDataset.slugs;
		} else {
			slugs = this.pokemonDataset.get_slugs().slice(0);
		}
		var slug = this.customStats.keys();
		while(slug.hasNext()) {
			var slug1 = slug.next();
			slugs.push(slug1);
		}
		if(this.currentMatchDataset.slugs != null) {
			var _g = 0;
			var _g1 = this.currentMatchDataset.slugs;
			while(_g < _g1.length) {
				var slug2 = _g1[_g];
				++_g;
				slugs.push(slug2);
			}
		}
		return slugs;
	}
	,getPokemonStats: function(slug) {
		var pokemonStats = new visualizer_datastruct_VisualizerPokemonStats();
		var _this = this.customStats;
		if(__map_reserved[slug] != null ? _this.existsReserved(slug) : _this.h.hasOwnProperty(slug)) {
			var _this1 = this.customStats;
			pokemonStats.update(__map_reserved[slug] != null ? _this1.getReserved(slug) : _this1.h[slug]);
			return pokemonStats;
		} else if(this.currentMatchDataset.slugs != null && this.currentMatchDataset.slugs.indexOf(slug) >= 0) {
			pokemonStats.update(this.currentMatchDataset.getPokemonStats(slug));
			return pokemonStats;
		} else if(this.edition == visualizer_model_PokemonDatabase.API_EDITION) {
			var stats = this.apiPokemonDataset.getPokemonStats(slug);
			if(stats != null) {
				pokemonStats.update(stats);
				this.backfillMissingPokemonStats(pokemonStats);
				pokemonStats.fillDefaultSets();
				return pokemonStats;
			} else {
				throw new js__$Boot_HaxeError(new visualizer_model_StatsNotFoundError());
			}
		} else {
			try {
				var stats1 = this.pokemonDataset.getPokemonStats(slug);
				pokemonStats.update(stats1);
				return pokemonStats;
			} catch( error ) {
				if (error instanceof js__$Boot_HaxeError) error = error.val;
				if( js_Boot.__instanceof(error,visualizer_dataset_DatasetItemNotFoundError) ) {
					throw new js__$Boot_HaxeError(new visualizer_model_StatsNotFoundError());
				} else throw(error);
			}
		}
	}
	,getPokemonSlugByID: function(id,movesetName) {
		try {
			if(this.edition == visualizer_model_PokemonDatabase.API_EDITION) {
				return this.apiPokemonDataset.getSlug(id,movesetName);
			} else {
				return this.pokemonDataset.getSlug(id);
			}
		} catch( error ) {
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			if( js_Boot.__instanceof(error,visualizer_dataset_DatasetItemNotFoundError) ) {
				throw new js__$Boot_HaxeError(new visualizer_model_StatsNotFoundError());
			} else throw(error);
		}
	}
	,setCustomPokemonStats: function(slug,stats) {
		var this1 = this.customStats;
		var value = stats.copy();
		var _this = this1;
		if(__map_reserved[slug] != null) {
			_this.setReserved(slug,value);
		} else {
			_this.h[slug] = value;
		}
	}
	,isCustomized: function(slug) {
		var _this = this.customStats;
		if(__map_reserved[slug] != null) {
			return _this.existsReserved(slug);
		} else {
			return _this.h.hasOwnProperty(slug);
		}
	}
	,getCurrentMatchPokemonStats: function() {
		var _g = 0;
		var _g1 = this.currentMatchDataset.pokemonStatsList;
		while(_g < _g1.length) {
			var stats = _g1[_g];
			++_g;
			this.backfillMissingPokemonStats(stats);
		}
		return this.currentMatchDataset.pokemonStatsList;
	}
	,backfillMissingPokemonStats: function(stats) {
		if(stats.slug == null) {
			stats.slug = this.getPokemonSlugByID(stats.number);
		}
		var originalDBIndex = this.getEdition();
		this.setEdition(this.getLastStaticEdition());
		var historicalStats = this.getPokemonStats(this.getPokemonSlugByID(stats.number));
		this.setEdition(originalDBIndex);
		stats.types = historicalStats.types;
		stats.weight = historicalStats.weight;
		if(stats.moves == null) {
			stats.moves = [];
		}
	}
	,__class__: visualizer_model_PokemonDatabase
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
js_Boot.__toStr = ({ }).toString;
visualizer_Formula.LEVEL = 100;
visualizer_Formula.RANDOM_MIN_MODIFIER = 0.85;
visualizer_Formula.CRIT_MODIFIER = 2.0;
visualizer_Formula.FIXED_DAMAGE_MOVE = ["seismic-toss","night-shade"];
visualizer_Formula.WEIGHT_MOVE = ["low-kick","grass-knot"];
visualizer_Formula.HAPPINESS_MOVE = ["return","frustration"];
visualizer_Formula.VARIABLE_POWER_MOVE = ["magnitude"];
visualizer_Main.LOAD_FAIL_MSG = "Loading dataset failed. Reload the page.";
visualizer_MatchupChart.NUM_POKEMON_PER_TEAM = 3;
visualizer_MatchupChart.NUM_MOVES_PER_POKEMON = 4;
visualizer_MatchupChart.POKEMON_LABEL = 1;
visualizer_MatchupChart.POKEMON_MOVES_LABEL = 1;
visualizer_MatchupChart.DIVIDER = 1;
visualizer_UI.Mustache = Mustache;
visualizer_UI.DEFAULT_POKEMON = [493,257,462,244,441,139].slice(0);
visualizer_api_APIFacade.CURRENT_MATCH_API_URL = "https://twitchplayspokemon.tv/api/current_match";
visualizer_api_APIFacade.POKEMON_SETS_API_URL = "https://twitchplayspokemon.tv/api/pokemon_sets?id&limit=100";
visualizer_api_APIFacade.CONSUME_CURSOR_API_URL = "https://twitchplayspokemon.tv/api/cursor/";
visualizer_dataset_APIPokemonDataset.STORAGE_KEY = "tpp-api-moveset";
visualizer_dataset_APIPokemonDataset.STORAGE_VERISON = 2;
visualizer_dataset_APIPokemonDataset.MIN_STORAGE_VERSION = 2;
visualizer_dataset_PokemonDataset.DATASET_FILES = ["pbr-gold.json","pbr-platinum.json","pbr-seel.json","pbr-gold-1.2.json","pbr-gold-1.2-2015-11-07.json","pbr-2.0.json"];
visualizer_dataset_PokemonDataset.DATASET_NAMES = ["Nkekev PBR Gold","Nkekev PBR Platinum","TPPVisuals PBR Seel","Addarash1/Chaos_lord PBR Gold 1.2","Chauzu PBR Gold 1.2 2015-11-07","Addarash1 PBR 2.0"];
visualizer_dataset_PokemonDataset.DEFAULT_INDEX = 5;
visualizer_model_PokemonDatabase.API_EDITION = "API";
visualizer_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
