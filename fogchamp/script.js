// Generated by Haxe 3.3.0
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var visualizer_APIFacade = function(pokemonDataset) {
	this.callInProgress = false;
	this.pokemonDataset = pokemonDataset;
};
visualizer_APIFacade.__name__ = true;
visualizer_APIFacade.slugify = function(text,noDash) {
	text = StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(text.toLowerCase(),"♀","f"),"♂","m")," ","-"),"é","e");
	if(noDash) {
		text = StringTools.replace(text,"-","");
	}
	text = text.replace(new RegExp("[^a-zA-Z-]","g".split("u").join("")),"");
	return text;
};
visualizer_APIFacade.prototype = {
	getCurrentMatch: function(callback) {
		var _gthis = this;
		this.callAPI(visualizer_APIFacade.CURRENT_MATCH_API_URL,function(jsonResult,textStatus,xhr) {
			if(Object.prototype.hasOwnProperty.call(jsonResult,"message")) {
				callback(false,Reflect.field(jsonResult,"message"),null);
			} else {
				callback(true,null,_gthis.parseMatchPokemon(jsonResult));
			}
		},function(xhr1,textStatus1,error) {
			var jsonResult1 = xhr1.responseJSON;
			if(jsonResult1 != null && Object.prototype.hasOwnProperty.call(jsonResult1,"message")) {
				callback(false,Reflect.field(jsonResult1,"message"),null);
			} else {
				callback(false,xhr1.statusText,null);
			}
		});
	}
	,callAPI: function(url,done,error) {
		var _gthis = this;
		if(this.callInProgress) {
			throw new js__$Boot_HaxeError("Call already in progress");
		}
		this.callInProgress = true;
		$.getJSON(url).done(done).fail(error).always(function() {
			_gthis.callInProgress = false;
		});
	}
	,parseMatchPokemon: function(jsonDoc) {
		var teams = Reflect.field(jsonDoc,"teams");
		var teamBlue = teams[0];
		var teamRed = teams[1];
		var pokemonStats = [];
		var _g = 0;
		while(_g < teamBlue.length) {
			var pokemonDoc = teamBlue[_g];
			++_g;
			pokemonStats.push(this.parsePokemonStats(pokemonDoc));
		}
		var _g1 = 0;
		while(_g1 < teamRed.length) {
			var pokemonDoc1 = teamRed[_g1];
			++_g1;
			pokemonStats.push(this.parsePokemonStats(pokemonDoc1));
		}
		return pokemonStats;
	}
	,parsePokemonStats: function(jsonDoc) {
		var stats = new visualizer_PokemonStats();
		var speciesId = Reflect.field(Reflect.field(jsonDoc,"species"),"id");
		var effectiveStats = Reflect.field(jsonDoc,"stats");
		stats.slug = this.pokemonDataset.getSlug(speciesId);
		var originalDBIndex = this.pokemonDataset.datasetIndex;
		this.pokemonDataset.datasetIndex = 5;
		var historicalStats = this.pokemonDataset.getPokemonStats(stats.slug);
		this.pokemonDataset.datasetIndex = originalDBIndex;
		if(Object.prototype.hasOwnProperty.call(jsonDoc,"ability") && Reflect.field(jsonDoc,"ability") != null) {
			var rawName = Reflect.field(Reflect.field(jsonDoc,"ability"),"name");
			if(rawName != null) {
				stats.ability = visualizer_APIFacade.slugify(rawName);
			}
		}
		stats.attack = Reflect.field(effectiveStats,"atk");
		stats.defense = Reflect.field(effectiveStats,"def");
		stats.gender = Reflect.field(jsonDoc,"gender");
		stats.happiness = Reflect.field(jsonDoc,"happiness");
		stats.hp = Reflect.field(effectiveStats,"hp");
		if(Object.prototype.hasOwnProperty.call(jsonDoc,"item") && Reflect.field(jsonDoc,"item") != null) {
			var rawName1 = Reflect.field(Reflect.field(jsonDoc,"item"),"name");
			if(rawName1 != null) {
				stats.item = visualizer_APIFacade.slugify(rawName1);
			}
		}
		stats.moves = [];
		var moveDocList = Reflect.field(jsonDoc,"moves");
		var _g = 0;
		while(_g < moveDocList.length) {
			var moveDoc = moveDocList[_g];
			++_g;
			var moveSlug = visualizer_APIFacade.slugify(Reflect.field(moveDoc,"name"));
			stats.moves.push(moveSlug);
			if(moveSlug == "hidden-power") {
				stats.moveTypeOverride = visualizer_APIFacade.slugify(Reflect.field(moveDoc,"type"));
			}
		}
		stats.name = Reflect.field(jsonDoc,"ingamename");
		if(Object.prototype.hasOwnProperty.call(jsonDoc,"nature") && Reflect.field(jsonDoc,"nature") != null) {
			stats.nature = visualizer_APIFacade.slugify(Reflect.field(Reflect.field(jsonDoc,"nature"),"name"));
		}
		stats.number = speciesId;
		stats.specialAttack = Reflect.field(effectiveStats,"spA");
		stats.specialDefense = Reflect.field(effectiveStats,"spD");
		stats.speed = Reflect.field(effectiveStats,"spe");
		stats.types = historicalStats.types;
		stats.weight = historicalStats.weight;
		return stats;
	}
	,__class__: visualizer_APIFacade
};
var visualizer_Dataset = function() {
};
visualizer_Dataset.__name__ = true;
visualizer_Dataset.prototype = {
	load: function(callback) {
	}
	,makeRequest: function(url,callback) {
		this.callback = callback;
		jQuery.getJSON(url).done($bind(this,this.loadDone)).fail($bind(this,this.loadFailed));
	}
	,loadDone: function(data) {
		this.callback(true);
	}
	,loadFailed: function() {
		this.callback(false);
	}
	,__class__: visualizer_Dataset
};
var visualizer_DescriptionsDataset = function() {
	visualizer_Dataset.call(this);
};
visualizer_DescriptionsDataset.__name__ = true;
visualizer_DescriptionsDataset.__super__ = visualizer_Dataset;
visualizer_DescriptionsDataset.prototype = $extend(visualizer_Dataset.prototype,{
	load: function(callback) {
		this.makeRequest("descriptions.json",callback);
	}
	,loadDone: function(data) {
		this.abilities = new haxe_ds_StringMap();
		var abilitiesDoc = Reflect.field(data,"abilities");
		var _g = 0;
		var _g1 = Reflect.fields(abilitiesDoc);
		while(_g < _g1.length) {
			var slug = _g1[_g];
			++_g;
			var value = Reflect.field(abilitiesDoc,slug);
			var _this = this.abilities;
			if(__map_reserved[slug] != null) {
				_this.setReserved(slug,value);
			} else {
				_this.h[slug] = value;
			}
		}
		this.types_efficacy = new haxe_ds_StringMap();
		var typesDoc = Reflect.field(data,"types_efficacy");
		var _g2 = 0;
		var _g11 = Reflect.fields(typesDoc);
		while(_g2 < _g11.length) {
			var firstType = _g11[_g2];
			++_g2;
			var secondTypesDoc = Reflect.field(typesDoc,firstType);
			var _g21 = 0;
			var _g3 = Reflect.fields(secondTypesDoc);
			while(_g21 < _g3.length) {
				var secondType = _g3[_g21];
				++_g21;
				var efficacy = Reflect.field(secondTypesDoc,secondType);
				var _this1 = this.types_efficacy;
				var key = "" + firstType + "*" + secondType;
				if(__map_reserved[key] != null) {
					_this1.setReserved(key,efficacy);
				} else {
					_this1.h[key] = efficacy;
				}
			}
		}
		this.items = new haxe_ds_StringMap();
		var itemsDoc = Reflect.field(data,"items");
		var _g4 = 0;
		var _g12 = Reflect.fields(itemsDoc);
		while(_g4 < _g12.length) {
			var slug1 = _g12[_g4];
			++_g4;
			var value1 = Reflect.field(itemsDoc,slug1);
			var _this2 = this.items;
			if(__map_reserved[slug1] != null) {
				_this2.setReserved(slug1,value1);
			} else {
				_this2.h[slug1] = value1;
			}
		}
		visualizer_Dataset.prototype.loadDone.call(this,data);
	}
	,getAbilityName: function(slug) {
		var _this = this.abilities;
		return (__map_reserved[slug] != null?_this.getReserved(slug):_this.h[slug]).name;
	}
	,getItemName: function(slug) {
		var _this = this.items;
		return (__map_reserved[slug] != null?_this.getReserved(slug):_this.h[slug]).name;
	}
	,getTypeEfficacy: function(user,foe,foeSecondary) {
		var _this = this.types_efficacy;
		var key = "" + user + "*" + foe;
		var efficacy = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		if(foeSecondary == null) {
			return efficacy;
		}
		var _this1 = this.types_efficacy;
		var key1 = "" + user + "*" + foeSecondary;
		var secondaryEfficacy = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
		switch(efficacy) {
		case 0:
			return 0;
		case 50:
			switch(secondaryEfficacy) {
			case 0:
				return 0;
			case 50:
				return 25;
			case 100:
				return 50;
			case 200:
				return 100;
			default:
				return 100;
			}
			break;
		case 100:
			switch(secondaryEfficacy) {
			case 0:
				return 0;
			case 50:
				return 50;
			case 200:
				return 200;
			default:
				return 100;
			}
			break;
		case 200:
			switch(secondaryEfficacy) {
			case 0:
				return 0;
			case 50:
				return 100;
			case 100:
				return 200;
			case 200:
				return 400;
			default:
				return 100;
			}
			break;
		default:
			if(secondaryEfficacy == 0) {
				return 0;
			} else {
				return 100;
			}
		}
	}
	,__class__: visualizer_DescriptionsDataset
});
var visualizer_FormulaOptions = function() {
	this.typeImmunities = true;
};
visualizer_FormulaOptions.__name__ = true;
visualizer_FormulaOptions.prototype = {
	__class__: visualizer_FormulaOptions
};
var visualizer_Formula = function() { };
visualizer_Formula.__name__ = true;
visualizer_Formula.computeResult = function(userPokemonStat,foePokemonStat,userMoveStat,descriptionsDataset,formulaOptions) {
	var userMoveType = userMoveStat.moveType;
	var userTypes = userPokemonStat.types;
	var foeTypes = foePokemonStat.types;
	var factor = descriptionsDataset.getTypeEfficacy(userMoveType,foeTypes[0],foeTypes[1]);
	var userBasePower = visualizer_Formula.computeBasePower(userPokemonStat,foePokemonStat,userMoveStat);
	var isVariableBasePower = visualizer_Formula.VARIABLE_POWER_MOVE.indexOf(userMoveStat.slug) != -1;
	var isFixedDamageMove = visualizer_Formula.FIXED_DAMAGE_MOVE.indexOf(userMoveStat.slug) != -1;
	if(!formulaOptions.typeImmunities && factor == 0) {
		factor = 100;
	}
	if(userBasePower == null && !isFixedDamageMove && !isVariableBasePower) {
		return { factor : factor, minHP : null, maxHP : null, critHP : null};
	}
	var userAttack;
	var foeDefense;
	if(userMoveStat.damageCategory == "physical") {
		userAttack = userPokemonStat.attack;
	} else {
		userAttack = userPokemonStat.specialAttack;
	}
	if(userMoveStat.damageCategory == "physical") {
		foeDefense = foePokemonStat.defense;
	} else {
		foeDefense = foePokemonStat.specialDefense;
	}
	var stab = userTypes.indexOf(userMoveType) != -1;
	var damageResult;
	if(isFixedDamageMove) {
		damageResult = { factor : factor, minHP : visualizer_Formula.LEVEL, maxHP : visualizer_Formula.LEVEL, critHP : visualizer_Formula.LEVEL};
	} else if(isVariableBasePower) {
		var damageResultLow = visualizer_Formula.computeDamage(userAttack,foeDefense,10,stab,factor);
		var damageResultHigh = visualizer_Formula.computeDamage(userAttack,foeDefense,150,stab,factor);
		damageResult = { factor : factor, minHP : damageResultLow.minHP, maxHP : damageResultHigh.maxHP, critHP : damageResultHigh.critHP};
	} else {
		damageResult = visualizer_Formula.computeDamage(userAttack,foeDefense,userBasePower,stab,factor);
	}
	if(userMoveStat.maxHits != null) {
		damageResult = visualizer_Formula.modifyHits(damageResult,userMoveStat.minHits,userMoveStat.maxHits);
	}
	return damageResult;
};
visualizer_Formula.computeBasePower = function(userPokemonStat,foePokemonStat,userMoveStat) {
	switch(userMoveStat.slug) {
	case "frustration":
		if(userPokemonStat.happiness != null) {
			return Math.max(1,(255 - userPokemonStat.happiness) / 2.5) | 0;
		}
		break;
	case "grass-knot":case "low-kick":
		if(foePokemonStat.weight != null) {
			return visualizer_Formula.weightToPower(foePokemonStat.weight);
		}
		break;
	case "return":
		if(userPokemonStat.happiness != null) {
			return Math.max(1,userPokemonStat.happiness / 2.5) | 0;
		}
		break;
	}
	return userMoveStat.power;
};
visualizer_Formula.computeDamage = function(userAttack,foeDefense,userBasePower,stab,damageFactor) {
	var modifier = damageFactor / 100;
	if(stab) {
		modifier *= 1.5;
	}
	var damage = (2 * visualizer_Formula.LEVEL + 10) / 250 * (userAttack / foeDefense) * userBasePower + 2;
	damage *= modifier;
	return { factor : damageFactor, minHP : damage * visualizer_Formula.RANDOM_MIN_MODIFIER, maxHP : damage, critHP : damage * visualizer_Formula.CRIT_MODIFIER};
};
visualizer_Formula.modifyHits = function(damageResult,minHits,maxHits) {
	return { factor : damageResult.factor, minHP : damageResult.minHP * minHits, maxHP : damageResult.maxHP * maxHits, critHP : damageResult.critHP * maxHits};
};
visualizer_Formula.resultsToPercentages = function(damageResult,foeHP) {
	return { factor : damageResult.factor, minHP : damageResult.minHP, maxHP : damageResult.maxHP, critHP : damageResult.critHP, minHPPercent : damageResult.minHP / foeHP * 100 | 0, maxHPPercent : damageResult.maxHP / foeHP * 100 | 0, critHPPercent : damageResult.critHP / foeHP * 100 | 0};
};
visualizer_Formula.weightToPower = function(weight) {
	if(weight < 10) {
		return 20;
	} else if(weight < 25) {
		return 40;
	} else if(weight < 50) {
		return 60;
	} else if(weight < 100) {
		return 80;
	} else if(weight < 200) {
		return 100;
	} else {
		return 120;
	}
};
var visualizer_Main = function() {
	this.userMessage = new visualizer_UserMessage();
	this.pokemonDataset = new visualizer_PokemonDataset();
	this.movesDataset = new visualizer_MovesDataset();
	this.descriptionsDataset = new visualizer_DescriptionsDataset();
};
visualizer_Main.__name__ = true;
visualizer_Main.main = function() {
	var app = new visualizer_Main();
	js.JQuery(window.document.body).ready(function(event) {
		app.run();
	});
};
visualizer_Main.prototype = {
	run: function() {
		this.loadPokemonDataset();
	}
	,loadPokemonDataset: function() {
		var _gthis = this;
		this.userMessage.showMessage("Loading Pokemon dataset.");
		this.pokemonDataset.load(function(success) {
			if(success) {
				_gthis.userMessage.hide();
				_gthis.loadMovesDataset();
			} else {
				_gthis.userMessage.showMessage(visualizer_Main.LOAD_FAIL_MSG);
			}
		});
	}
	,loadMovesDataset: function() {
		var _gthis = this;
		this.userMessage.showMessage("Loading Moves dataset.");
		this.movesDataset.load(function(success) {
			if(success) {
				_gthis.userMessage.hide();
				_gthis.loadDescriptionsDataset();
			} else {
				_gthis.userMessage.showMessage(visualizer_Main.LOAD_FAIL_MSG);
			}
		});
	}
	,loadDescriptionsDataset: function() {
		var _gthis = this;
		this.userMessage.showMessage("Loading Descriptions dataset.");
		this.descriptionsDataset.load(function(success) {
			if(success) {
				_gthis.userMessage.hide();
				_gthis.loadUI();
			} else {
				_gthis.userMessage.showMessage(visualizer_Main.LOAD_FAIL_MSG);
			}
		});
	}
	,loadUI: function() {
		this.ui = new visualizer_UI(this.pokemonDataset,this.movesDataset,this.descriptionsDataset);
		this.ui.setup();
	}
	,__class__: visualizer_Main
};
var visualizer_Orientation = { __ename__ : true, __constructs__ : ["Vertical","Horizontal"] };
visualizer_Orientation.Vertical = ["Vertical",0];
visualizer_Orientation.Vertical.__enum__ = visualizer_Orientation;
visualizer_Orientation.Horizontal = ["Horizontal",1];
visualizer_Orientation.Horizontal.__enum__ = visualizer_Orientation;
var visualizer_MatchupChart = function(pokemonDataset,movesDataset,descriptionsDataset,formulaOptions) {
	this.pokemonDataset = pokemonDataset;
	this.movesDataset = movesDataset;
	this.descriptionsDataset = descriptionsDataset;
	this.formulaOptions = formulaOptions;
};
visualizer_MatchupChart.__name__ = true;
visualizer_MatchupChart.prototype = {
	setPokemon: function(pokemonStats) {
		this.pokemonStats = pokemonStats;
	}
	,renderTable: function() {
		this.tableElement = window.document.createElement("table");
		this.tableElement.classList.add("matchupChart");
		var maxWidth = visualizer_MatchupChart.POKEMON_LABEL + visualizer_MatchupChart.POKEMON_MOVES_LABEL + visualizer_MatchupChart.NUM_POKEMON_PER_TEAM * visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
		this.renderTopPokemonLabelRow(js_Boot.__cast(this.tableElement.insertRow(-1) , HTMLTableRowElement));
		this.renderTopPokemonMovesRow(js_Boot.__cast(this.tableElement.insertRow(-1) , HTMLTableRowElement));
		var _g1 = 0;
		var _g = visualizer_MatchupChart.NUM_POKEMON_PER_TEAM * (visualizer_MatchupChart.NUM_MOVES_PER_POKEMON + visualizer_MatchupChart.DIVIDER);
		while(_g1 < _g) this.renderMoveRow(_g1++,js_Boot.__cast(this.tableElement.insertRow(-1) , HTMLTableRowElement));
		return this.tableElement;
	}
	,renderTopPokemonLabelRow: function(rowElement) {
		var cornerCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
		cornerCell.colSpan = cornerCell.rowSpan = visualizer_MatchupChart.POKEMON_LABEL + visualizer_MatchupChart.POKEMON_MOVES_LABEL;
		var _g = 0;
		var _g1 = [3,4,5];
		while(_g < _g1.length) {
			var slotNum = _g1[_g];
			++_g;
			var pokemonStat = this.pokemonStats[slotNum];
			var labelCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
			labelCell.colSpan = visualizer_MatchupChart.DIVIDER + visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
			this.processPokemonLabelCell(pokemonStat,labelCell,"top");
		}
	}
	,renderTopPokemonMovesRow: function(rowElement) {
		var _g = 0;
		var _g1 = [3,4,5];
		while(_g < _g1.length) {
			var slotNum = _g1[_g];
			++_g;
			var pokemonStat = this.pokemonStats[slotNum];
			this.renderDividerCell(rowElement);
			var _g3 = 0;
			var _g2 = visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
			while(_g3 < _g2) this.renderMoveLabelCell(pokemonStat,_g3++,rowElement,"top");
		}
	}
	,renderMoveRow: function(rowIndex,rowElement) {
		var cellLength = visualizer_MatchupChart.DIVIDER + visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
		var leftSlotNum = rowIndex / cellLength | 0;
		var leftMoveIndex = (rowIndex % cellLength | 0) - 1;
		var leftPokemonStat = this.pokemonStats[leftSlotNum];
		if(rowIndex % cellLength == 0) {
			this.renderLeftPokemonLabel(leftPokemonStat,rowElement);
			this.renderDividerCell(rowElement);
		}
		if(leftMoveIndex >= 0) {
			this.renderMoveLabelCell(leftPokemonStat,leftMoveIndex,rowElement,"left");
		}
		var _g = 3;
		while(_g < 6) this.renderVersusMatrix(rowElement,leftMoveIndex,leftPokemonStat,this.pokemonStats[_g++]);
	}
	,renderVersusMatrix: function(rowElement,leftMoveIndex,leftPokemonStat,topPokemonStat) {
		if(leftMoveIndex == -1) {
			this.renderDividerCell(rowElement,"first").classList.add("matchupChartDividerCellSpeed-" + (leftPokemonStat.speed > topPokemonStat.speed?"blue":leftPokemonStat.speed < topPokemonStat.speed?"red":"tie"));
			var topPokemonMoveSlugs = topPokemonStat.moves;
			var _g1 = 0;
			var _g = visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
			while(_g1 < _g) {
				var topMoveIndex = _g1++;
				var cell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
				cell.rowSpan = topMoveIndex + 1;
				if(topMoveIndex < topPokemonMoveSlugs.length) {
					this.processCellEfficacy(cell,this.movesDataset.getMoveStats(topPokemonMoveSlugs[topMoveIndex],topPokemonStat),topPokemonStat,leftPokemonStat,"top");
				}
			}
		} else {
			var cell1 = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
			cell1.colSpan = leftMoveIndex + 1;
			var leftPokemonMoveSlugs = leftPokemonStat.moves;
			if(leftMoveIndex < leftPokemonMoveSlugs.length) {
				this.processCellEfficacy(cell1,this.movesDataset.getMoveStats(leftPokemonMoveSlugs[leftMoveIndex],leftPokemonStat),leftPokemonStat,topPokemonStat,"left");
			}
			if(leftMoveIndex == 3) {
				this.renderDividerCell(rowElement,"last");
			} else {
				this.renderDividerCell(rowElement);
			}
		}
	}
	,renderLeftPokemonLabel: function(pokemonStat,rowElement) {
		var labelCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
		labelCell.rowSpan = visualizer_MatchupChart.DIVIDER + visualizer_MatchupChart.NUM_MOVES_PER_POKEMON;
		this.processPokemonLabelCell(pokemonStat,labelCell,"left");
	}
	,renderMoveLabelCell: function(pokemonStat,moveIndex,rowElement,position) {
		var labelCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
		var moveSlugs = pokemonStat.moves;
		if(moveIndex < moveSlugs.length) {
			this.processMoveLabelCell(this.movesDataset.getMoveStats(moveSlugs[moveIndex],pokemonStat),labelCell,position);
		}
	}
	,processPokemonLabelCell: function(pokemonStat,cell,position) {
		var container = window.document.createElement("div");
		container.classList.add("matchupChartLabel-" + position);
		var span = window.document.createElement("span");
		span.classList.add("matchupChartLabelRotate-" + position);
		var pokemonTypes = pokemonStat.types;
		var _g = 0;
		while(_g < pokemonTypes.length) {
			var pokemonType = pokemonTypes[_g];
			++_g;
			var typeIcon = window.document.createElement("span");
			typeIcon.classList.add("pokemonType-" + pokemonType);
			typeIcon.classList.add("miniPokemonTypeIcon");
			typeIcon.textContent = " ";
			span.appendChild(typeIcon);
		}
		var labelText = window.document.createElement("span");
		labelText.textContent = pokemonStat.name;
		span.appendChild(labelText);
		container.appendChild(span);
		cell.appendChild(container);
	}
	,processMoveLabelCell: function(moveStats,cell,position) {
		cell.classList.add("matchupChartMoveCell-" + position);
		var container = window.document.createElement("div");
		container.classList.add("matchupChartMoveLabel-" + position);
		var span = window.document.createElement("span");
		span.classList.add("matchupChartMoveLabelRotate-" + position);
		var typeIcon = window.document.createElement("span");
		typeIcon.classList.add("pokemonType-" + Std.string(moveStats.move_type));
		typeIcon.classList.add("miniPokemonTypeIcon");
		typeIcon.textContent = " ";
		span.appendChild(typeIcon);
		var moveLabelText = window.document.createElement("span");
		moveLabelText.textContent = moveStats.name;
		span.appendChild(moveLabelText);
		container.appendChild(span);
		cell.appendChild(container);
	}
	,renderDividerCell: function(rowElement,classSuffix) {
		var dividerCell = js_Boot.__cast(rowElement.insertCell(-1) , HTMLTableCellElement);
		dividerCell.classList.add("matchupChartDividerCell");
		if(classSuffix != null) {
			dividerCell.classList.add("matchupChartDividerCell-" + classSuffix);
		}
		return dividerCell;
	}
	,processCellEfficacy: function(cell,userMoveStat,userPokemonStat,foePokemonStat,position) {
		cell.classList.add("matchupChartEfficacyCell-" + position);
		if(userMoveStat.accuracy == null && userMoveStat.power == null) {
			return;
		}
		var container = window.document.createElement("div");
		container.classList.add("matchupChartEfficacy-" + position);
		var span = window.document.createElement("span");
		span.classList.add("matchupChartEfficacyRotate-" + position);
		var damageResult = visualizer_Formula.computeResult(userPokemonStat,foePokemonStat,userMoveStat,this.descriptionsDataset,this.formulaOptions);
		var factor = damageResult.factor;
		var factorString;
		switch(factor) {
		case 0:
			factorString = "0";
			break;
		case 25:
			factorString = "¼";
			break;
		case 50:
			factorString = "½";
			break;
		case 100:
			factorString = "1";
			break;
		case 200:
			factorString = "2";
			break;
		case 400:
			factorString = "4";
			break;
		default:
			factorString = "Err";
		}
		if(damageResult.maxHP == null) {
			if(userMoveStat.damageCategory == "status") {
				if(factor == 0) {
					span.textContent = "✕";
				} else {
					span.textContent = "○";
				}
			} else {
				span.textContent = "×" + factorString;
			}
			span.classList.add("damageEfficacy-" + factor);
		} else {
			var damageResultPercent = visualizer_Formula.resultsToPercentages(damageResult,foePokemonStat.hp);
			span.innerHTML = "<span class=\"damageEfficacy-" + factor + " matchupChartSubEfficacy\">×" + factorString + "</span>\n                <span class=matchupChartSubEfficacy\n                data-help-slug=\"damage:\n                " + userPokemonStat.name + " " + userMoveStat.name + ":\n                " + damageResultPercent.minHPPercent + ":" + damageResultPercent.maxHPPercent + ":" + damageResultPercent.critHPPercent + "\"\n                >" + damageResultPercent.maxHPPercent + "<span class=dimLabel>%</span>\n                </span>";
		}
		container.appendChild(span);
		cell.appendChild(container);
	}
	,__class__: visualizer_MatchupChart
};
var visualizer_MoveStats = function() {
};
visualizer_MoveStats.__name__ = true;
visualizer_MoveStats.fromJson = function(slug,doc) {
	var stat = new visualizer_MoveStats();
	stat.accuracy = Reflect.field(doc,"accuracy");
	stat.damageCategory = Reflect.field(doc,"damage_category");
	stat.description = Reflect.field(doc,"description");
	stat.maxHits = Reflect.field(doc,"max_hits");
	stat.minHits = Reflect.field(doc,"min_hits");
	stat.moveType = Reflect.field(doc,"move_type");
	stat.name = Reflect.field(doc,"name");
	stat.power = Reflect.field(doc,"power");
	stat.pp = Reflect.field(doc,"pp");
	stat.slug = slug;
	return stat;
};
visualizer_MoveStats.prototype = {
	toJson: function() {
		return { 'accuracy' : this.accuracy, 'damage_category' : this.damageCategory, 'description' : this.description, 'max_hits' : this.maxHits, 'min_hits' : this.minHits, 'move_type' : this.moveType, 'name' : this.name, 'power' : this.power, 'pp' : this.pp, 'slug' : this.slug};
	}
	,clone: function() {
		return visualizer_MoveStats.fromJson(this.slug,this.toJson());
	}
	,__class__: visualizer_MoveStats
};
var visualizer_MovesDataset = function() {
	visualizer_Dataset.call(this);
};
visualizer_MovesDataset.__name__ = true;
visualizer_MovesDataset.__super__ = visualizer_Dataset;
visualizer_MovesDataset.prototype = $extend(visualizer_Dataset.prototype,{
	load: function(callback) {
		this.makeRequest("moves.json",callback);
	}
	,loadDone: function(data) {
		this.moves = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var slug = _g1[_g];
			++_g;
			var value = visualizer_MoveStats.fromJson(slug,Reflect.field(data,slug));
			var _this = this.moves;
			if(__map_reserved[slug] != null) {
				_this.setReserved(slug,value);
			} else {
				_this.h[slug] = value;
			}
		}
		visualizer_Dataset.prototype.loadDone.call(this,data);
	}
	,getMoveStats: function(slug,pokemonStat) {
		var _this = this.moves;
		var moveStat = (__map_reserved[slug] != null?_this.getReserved(slug):_this.h[slug]).clone();
		if(pokemonStat != null && slug == "hidden-power" && pokemonStat.moveTypeOverride != null) {
			moveStat.moveType = pokemonStat.moveTypeOverride;
		}
		return moveStat;
	}
	,__class__: visualizer_MovesDataset
});
var visualizer_PokemonDataset = function() {
	this.datasetIndex = 0;
	visualizer_Dataset.call(this);
	this.datasets = [];
	this.customStats = new haxe_ds_StringMap();
};
visualizer_PokemonDataset.__name__ = true;
visualizer_PokemonDataset.__super__ = visualizer_Dataset;
visualizer_PokemonDataset.prototype = $extend(visualizer_Dataset.prototype,{
	load: function(callback) {
		this.loadOneDataset(callback);
	}
	,loadOneDataset: function(originalCallback) {
		var _gthis = this;
		this.makeRequest(visualizer_PokemonDataset.DATASET_FILES[this.datasetIndex],function(success) {
			if(success) {
				_gthis.datasetIndex += 1;
				if(_gthis.datasetIndex < visualizer_PokemonDataset.DATASET_FILES.length) {
					_gthis.loadOneDataset(originalCallback);
				} else {
					if(visualizer_PokemonDataset.DEFAULT_INDEX >= 0) {
						_gthis.datasetIndex = visualizer_PokemonDataset.DEFAULT_INDEX;
					} else {
						_gthis.datasetIndex -= 1;
					}
					originalCallback(success);
				}
			} else {
				originalCallback(success);
			}
		});
	}
	,loadDone: function(data) {
		var slugs = Reflect.field(data,"pokemon_slugs");
		var stats = Reflect.field(data,"stats");
		this.datasets.push({ slugs : slugs, stats : stats});
		visualizer_Dataset.prototype.loadDone.call(this,data);
	}
	,get_slugs: function() {
		return this.datasets[this.datasetIndex].slugs;
	}
	,get_stats: function() {
		return this.datasets[this.datasetIndex].stats;
	}
	,getPokemonStats: function(slug) {
		var tmp;
		if(this.datasetIndex == visualizer_PokemonDataset.CUSTOMIZABLE_INDEX) {
			var _this = this.customStats;
			if(__map_reserved[slug] != null) {
				tmp = _this.existsReserved(slug);
			} else {
				tmp = _this.h.hasOwnProperty(slug);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.customStats;
			return (__map_reserved[slug] != null?_this1.getReserved(slug):_this1.h[slug]).clone();
		} else {
			return visualizer_PokemonStats.fromJson(slug,Reflect.field(this.get_stats(),slug));
		}
	}
	,setPokemonStats: function(slug,stats) {
		var value = stats.clone();
		var _this = this.customStats;
		if(__map_reserved[slug] != null) {
			_this.setReserved(slug,value);
		} else {
			_this.h[slug] = value;
		}
	}
	,getSlug: function(pokemonNum) {
		var _g = 0;
		var _g1 = this.get_slugs();
		while(_g < _g1.length) {
			var slug = _g1[_g];
			++_g;
			if(this.getPokemonStats(slug).number == pokemonNum) {
				return slug;
			}
		}
		throw new js__$Boot_HaxeError("Unknown Pokemon number.");
	}
	,__class__: visualizer_PokemonDataset
});
var visualizer_PokemonStats = function() {
};
visualizer_PokemonStats.__name__ = true;
visualizer_PokemonStats.fromJson = function(slug,doc) {
	var stat = new visualizer_PokemonStats();
	stat.ability = Reflect.field(doc,"ability");
	stat.attack = Reflect.field(doc,"attack");
	stat.defense = Reflect.field(doc,"defense");
	stat.gender = Reflect.field(doc,"gender");
	stat.happiness = Reflect.field(doc,"happiness");
	stat.hp = Reflect.field(doc,"hp");
	stat.item = Reflect.field(doc,"item");
	stat.iv = Reflect.field(doc,"iv");
	stat.moveTypeOverride = Reflect.field(doc,"move_type_override");
	stat.moves = Reflect.field(doc,"moves");
	stat.name = Reflect.field(doc,"name");
	stat.nature = Reflect.field(doc,"nature");
	stat.number = Reflect.field(doc,"number");
	stat.specialAttack = Reflect.field(doc,"special_attack");
	stat.specialDefense = Reflect.field(doc,"special_defense");
	stat.speed = Reflect.field(doc,"speed");
	stat.types = Reflect.field(doc,"types");
	stat.weight = Reflect.field(doc,"weight");
	stat.slug = slug;
	return stat;
};
visualizer_PokemonStats.prototype = {
	toJson: function() {
		return { 'ability' : this.ability, 'attack' : this.attack, 'defense' : this.defense, 'gender' : this.gender, 'happiness' : this.happiness, 'hp' : this.hp, 'item' : this.item, 'iv' : this.iv, 'move_type_override' : this.moveTypeOverride, 'moves' : this.moves, 'name' : this.name, 'nature' : this.nature, 'number' : this.number, 'special_attack' : this.specialAttack, 'special_defense' : this.specialDefense, 'speed' : this.speed, 'types' : this.types, 'weight' : this.weight};
	}
	,clone: function() {
		return visualizer_PokemonStats.fromJson(this.slug,this.toJson());
	}
	,__class__: visualizer_PokemonStats
};
var visualizer_UI = function(pokemonDataset,movesDataset,descriptionsDataset) {
	this.previousUrlHash = null;
	this.pokemonDataset = pokemonDataset;
	this.movesDataset = movesDataset;
	this.descriptionsDataset = descriptionsDataset;
	this.userMessage = new visualizer_UserMessage();
	this.formulaOptions = new visualizer_FormulaOptions();
	this.apiFacade = new visualizer_APIFacade(pokemonDataset);
};
visualizer_UI.__name__ = true;
visualizer_UI.renderTemplate = function(template,data) {
	return visualizer_UI.Mustache.render(template,data);
};
visualizer_UI.prototype = {
	setup: function() {
		this.renderSelectionList();
		this.attachSelectChangeListeners();
		this.renderEditionSelect();
		this.attachUrlFragmentChangeListener();
		this.attachFetchFromAPIButtonListener();
		this.setSelectionByNumbers(visualizer_UI.DEFAULT_POKEMON);
		this.attachOptionsListeners();
		this.readUrlFragment();
		this.renderAll();
	}
	,renderSelectionList: function() {
		var template = js.JQuery("#pokemonSelectionTemplate").html();
		var rendered = visualizer_UI.renderTemplate(template,{ selections : this.buildSelectionList(), slots : [0,1,2]});
		js.JQuery("#pokemonSelectionBlue").html(rendered);
		var rendered1 = visualizer_UI.renderTemplate(template,{ selections : this.buildSelectionList(), slots : [3,4,5]});
		js.JQuery("#pokemonSelectionRed").html(rendered1);
	}
	,buildSelectionList: function() {
		var list = [];
		var _g = 0;
		var _g1 = this.pokemonDataset.get_slugs();
		while(_g < _g1.length) {
			var slug = _g1[_g];
			++_g;
			list.push({ slug : slug, name : this.pokemonDataset.getPokemonStats(slug).name});
		}
		list.sort(function(x,y) {
			return Reflect.compare(x.name.toLowerCase(),y.name.toLowerCase());
		});
		return list;
	}
	,attachSelectChangeListeners: function() {
		var _gthis = this;
		var _g = 0;
		while(_g < 6) {
			var i = [_g++];
			var jquery = js.JQuery("#selectionSelect" + i[0]);
			jquery.change((function(i1) {
				return function(event) {
					_gthis.selectChanged(i1[0]);
				};
			})(i));
			jquery.focus((function(i2) {
				return function(event1) {
					js.JQuery(".pokemonIconSlot-" + i2[0]).addClass("pokemonIcon-focus");
				};
			})(i));
			jquery.focusout((function(i3) {
				return function(event2) {
					js.JQuery(".pokemonIconSlot-" + i3[0]).removeClass("pokemonIcon-focus");
				};
			})(i));
		}
	}
	,renderEditionSelect: function() {
		var _gthis = this;
		var selectElement = js_Boot.__cast(window.document.getElementById("pokemonEditionSelect") , HTMLSelectElement);
		var _g1 = 0;
		var _g = visualizer_PokemonDataset.DATASET_NAMES.length;
		while(_g1 < _g) {
			var index = _g1++;
			var optionElement = window.document.createElement("option");
			optionElement.value = visualizer_PokemonDataset.DATASET_FILES[index];
			optionElement.textContent = visualizer_PokemonDataset.DATASET_NAMES[index];
			selectElement.add(optionElement);
		}
		if(visualizer_PokemonDataset.DEFAULT_INDEX >= 0) {
			selectElement.selectedIndex = visualizer_PokemonDataset.DEFAULT_INDEX;
		} else {
			selectElement.selectedIndex = visualizer_PokemonDataset.DATASET_FILES.length - 1;
		}
		js.JQuery("#pokemonEditionSelect").change(function(event) {
			_gthis.pokemonDataset.datasetIndex = selectElement.selectedIndex;
			_gthis.renderAll(false);
		});
	}
	,attachUrlFragmentChangeListener: function() {
		window.onhashchange = $bind(this,this.readUrlFragment);
	}
	,readUrlFragment: function() {
		var fragment = window.location.hash;
		if(fragment == this.previousUrlHash) {
			return;
		}
		var pattern = new EReg("([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)[^0-9]+([0-9]+)","");
		if(pattern.match(fragment)) {
			var pokemonNums = new Array(6);
			var _g = 0;
			while(_g < 6) {
				var i = _g++;
				pokemonNums[i] = Std.parseInt(pattern.matched(i + 1));
			}
			this.setSelectionByNumbers(pokemonNums);
			this.renderAll(false);
		} else {
			this.userMessage.showMessage("The URL fragment (stuff after the hash symbol) isn't valid.");
		}
	}
	,writeUrlFragment: function() {
		var fragment = "#";
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var pokemonNum = this.pokemonDataset.getPokemonStats(this.getSlotSlug(i)).number;
			if(i == 5) {
				fragment += "" + pokemonNum;
			} else {
				fragment += "" + pokemonNum + "-";
			}
		}
		this.previousUrlHash = "#" + fragment;
		window.location.hash = fragment;
	}
	,attachFetchFromAPIButtonListener: function() {
		var _gthis = this;
		js.JQuery("#fetchMatchFromAPIButton").click(function(event) {
			_gthis.fetchFromAPI();
		});
	}
	,fetchFromAPI: function() {
		var _gthis = this;
		js.JQuery("#fetchMatchFromAPIButton").prop("disabled",true);
		this.pokemonDataset.datasetIndex = visualizer_PokemonDataset.CUSTOMIZABLE_INDEX;
		this.userMessage.showMessage("Fetching current match from TPP API...");
		this.apiFacade.getCurrentMatch(function(success,errorMessage,pokemonStatsList) {
			js.JQuery("#fetchMatchFromAPIButton").prop("disabled",false);
			if(success) {
				_gthis.applyCustomPokemonList(pokemonStatsList);
			} else {
				_gthis.userMessage.showMessage("An error occurred fetching current match: \"" + errorMessage + "\". Complain to Felk if error persists.");
			}
		});
	}
	,setSelectionByNumbers: function(pokemonNums) {
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			this.setSlotSlug(i,this.pokemonDataset.getSlug(pokemonNums[i]));
		}
	}
	,selectChanged: function(slotNum) {
		this.renderAll();
	}
	,renderAll: function(updateUrlFragment) {
		if(updateUrlFragment == null) {
			updateUrlFragment = true;
		}
		try {
			this.renderMatchCommand();
			this.renderPokemonStats();
			this.renderPokemonMoves();
			this.renderChart();
			this.attachHelpListeners();
			if(this.pokemonDataset.datasetIndex == visualizer_PokemonDataset.CUSTOMIZABLE_INDEX) {
				js.JQuery(".pokemonEditContainer").show();
				this.attachEditListeners();
			} else {
				js.JQuery(".pokemonEditContainer").hide();
			}
			if(updateUrlFragment) {
				this.writeUrlFragment();
			}
			this.renderExtraUrls();
			this.userMessage.hide();
		} catch( error ) {
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			this.userMessage.showMessage("An error occured while attempting to render the data. File a bug report if this persists.");
			throw js__$Boot_HaxeError.wrap(error);
		}
	}
	,getSlotSlug: function(slotNum) {
		return js.JQuery("#selectionSelect" + slotNum).val();
	}
	,setSlotSlug: function(slotNum,slug) {
		js.JQuery("#selectionSelect" + slotNum).val(slug);
	}
	,renderMatchCommand: function() {
		var numbers = this.getMatchNumbers();
		var element = js_Boot.__cast(window.document.getElementById("matchCommand") , HTMLDivElement);
		element.textContent = "!match " + numbers[0] + "," + numbers[1] + "," + numbers[2] + "/" + numbers[3] + "," + numbers[4] + "," + numbers[5];
	}
	,getMatchNumbers: function() {
		var numbers = [];
		var _g = 0;
		while(_g < 6) numbers.push(this.pokemonDataset.getPokemonStats(this.getSlotSlug(_g++)).number);
		return numbers;
	}
	,renderPokemonStats: function() {
		var rendered = visualizer_UI.renderTemplate(js.JQuery("#pokemonStatsTemplate").html(),{ pokemonStats : this.buildPokemonStatsRenderDocs(true)});
		js.JQuery("#pokemonStats").html(rendered);
	}
	,getPokemonStatsSelected: function() {
		var slotNums = [0,1,2,3,4,5];
		var statsList = [];
		var _g = 0;
		while(_g < slotNums.length) {
			var slotNum = slotNums[_g];
			++_g;
			statsList.push(this.pokemonDataset.getPokemonStats(this.getSlotSlug(slotNum)));
		}
		return statsList;
	}
	,buildPokemonStatsRenderDocs: function(visualBlueHorizontalOrder) {
		var slotNums = [0,1,2,3,4,5];
		if(visualBlueHorizontalOrder) {
			slotNums = [2,1,0,3,4,5];
		}
		var statsList = [];
		var _g = 0;
		while(_g < slotNums.length) {
			var slotNum = slotNums[_g];
			++_g;
			var pokemonStats = this.pokemonDataset.getPokemonStats(this.getSlotSlug(slotNum));
			var abilityName = "";
			var _this = this.descriptionsDataset.abilities;
			var key = pokemonStats.ability;
			if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
				abilityName = this.descriptionsDataset.getAbilityName(pokemonStats.ability);
			}
			var itemName = "";
			var _this1 = this.descriptionsDataset.items;
			var key1 = pokemonStats.item;
			if(__map_reserved[key1] != null?_this1.existsReserved(key1):_this1.h.hasOwnProperty(key1)) {
				itemName = this.descriptionsDataset.getItemName(pokemonStats.item);
			}
			var renderDoc = pokemonStats.toJson();
			renderDoc.ability_name = abilityName;
			renderDoc.item_name = itemName;
			renderDoc.slot_number = slotNum;
			statsList.push(renderDoc);
		}
		return statsList;
	}
	,renderPokemonMoves: function() {
		var rendered = visualizer_UI.renderTemplate(js.JQuery("#pokemonMovesTemplate").html(),{ pokemonMoves : this.buildMovesRenderDocs()});
		js.JQuery("#pokemonMoves").html(rendered);
	}
	,buildMovesRenderDocs: function() {
		var movesList = [];
		var _g = 0;
		var _g1 = [2,1,0,3,4,5];
		while(_g < _g1.length) {
			var slotNum = _g1[_g];
			++_g;
			var pokemonStat = this.pokemonDataset.getPokemonStats(this.getSlotSlug(slotNum));
			var name = pokemonStat.name;
			var moveSlugs = pokemonStat.moves;
			var moves = [];
			var _g2 = 0;
			while(_g2 < moveSlugs.length) {
				var moveSlug = moveSlugs[_g2];
				++_g2;
				var moveStats = this.movesDataset.getMoveStats(moveSlug,pokemonStat);
				var moveRenderDoc = moveStats.toJson();
				moveRenderDoc.move_slug = moveSlug;
				moveRenderDoc.move_name = moveStats.name;
				moveRenderDoc.damage_category_short = HxOverrides.substr(moveStats.damageCategory,0,2);
				if(moveStats.power == null) {
					moveRenderDoc.power = "--";
				}
				if(moveStats.accuracy == null) {
					moveRenderDoc.accuracy = "--";
				}
				moves.push(moveRenderDoc);
			}
			movesList.push({ name : name, moves : moves});
		}
		return movesList;
	}
	,attachHelpListeners: function() {
		var _gthis = this;
		var _this = js.JQuery("[data-help-slug]");
		var tmp = (_this.iterator)();
		while(tmp.hasNext()) {
			var element = [tmp.next()];
			var clickElement = js.JQuery("<a href=>");
			clickElement.addClass("clickHelp");
			clickElement.click((function(element1) {
				return function() {
					_gthis.clickedHelp(element1[0].attr("data-help-slug"));
					return false;
				};
			})(element));
			element[0].wrapInner(clickElement);
		}
	}
	,clickedHelp: function(helpSlug) {
		var parts = helpSlug.split(":");
		var category = parts[0];
		var slug = parts[1];
		var title = slug;
		var text = "";
		if(category == "ability") {
			var _this = this.descriptionsDataset.abilities;
			var ability = __map_reserved[slug] != null?_this.getReserved(slug):_this.h[slug];
			title = ability.name;
			text = ability.description;
		} else if(category == "item") {
			var _this1 = this.descriptionsDataset.items;
			var item = __map_reserved[slug] != null?_this1.getReserved(slug):_this1.h[slug];
			title = item.name;
			text = item.description;
		} else if(category == "move") {
			var move = this.movesDataset.getMoveStats(slug);
			title = move.name;
			text = move.description;
		} else if(category == "damage") {
			text = "HP damage against foe (min, max, crit):" + parts[2] + "–" + parts[3] + "–" + parts[4] + "%";
		}
		if(text == null || text.length == 0) {
			text = "(no help available for this item)";
		}
		var jquery = js.JQuery("#helpDialog").text(text);
		jquery.dialog();
		var inViewport = jquery.visible();
		if(!inViewport) {
			jquery.dialog({ position : { my : "center top", at : "center top", of : window}});
		}
		jquery.dialog("option","title",title);
	}
	,attachEditListeners: function() {
		var _gthis = this;
		var _this = js.JQuery("[data-edit-slot]");
		var tmp = (_this.iterator)();
		while(tmp.hasNext()) {
			var element = [tmp.next()];
			var clickElement = js.JQuery("<a href=>");
			clickElement.addClass("clickEdit");
			clickElement.click((function(element1) {
				return function() {
					_gthis.clickedEdit(Std.parseInt(element1[0].attr("data-edit-slot")));
					return false;
				};
			})(element));
			element[0].wrapInner(clickElement);
		}
	}
	,clickedEdit: function(slotNum) {
		var slug = this.getSlotSlug(slotNum);
		var pokemonStats = this.pokemonDataset.getPokemonStats(slug);
		var template = js.JQuery("#pokemonEditTemplate").html();
		var html = visualizer_UI.renderTemplate(template,{ 'gender' : this.buildEditGenderRenderDoc(pokemonStats), 'ability' : this.buildEditAbilityRenderDoc(pokemonStats), 'item' : this.buildEditItemRenderDoc(pokemonStats), 'hp' : pokemonStats.hp, 'attack' : pokemonStats.attack, 'defense' : pokemonStats.defense, 'special_attack' : pokemonStats.specialAttack, 'special_defense' : pokemonStats.specialDefense, 'speed' : pokemonStats.speed, 'move1' : this.buildEditMoveRenderDoc(pokemonStats,0), 'move2' : this.buildEditMoveRenderDoc(pokemonStats,1), 'move3' : this.buildEditMoveRenderDoc(pokemonStats,2), 'move4' : this.buildEditMoveRenderDoc(pokemonStats,3)});
		var jquery = js.JQuery("#editDialog").html(html);
		jquery.dialog({ 'maxHeight' : 500});
		var inViewport = jquery.visible();
		if(!inViewport) {
			jquery.dialog({ position : { my : "center top", at : "center top", of : window}});
		}
		this.attachEditFormListeners(pokemonStats);
		jquery.dialog("option","title","Editing " + slug);
	}
	,buildEditGenderRenderDoc: function(pokemonStats) {
		var genderRenderList = [];
		var _g = 0;
		var _g1 = ["-","m","f"];
		while(_g < _g1.length) {
			var genderSlug = _g1[_g];
			++_g;
			genderRenderList.push({ 'slug' : genderSlug, 'label' : genderSlug, 'selected' : genderSlug == pokemonStats.gender?"selected":""});
		}
		return genderRenderList;
	}
	,buildEditAbilityRenderDoc: function(pokemonStats) {
		var abilityRenderList = [{ 'slug' : "", 'label' : "-", 'selected' : ""}];
		var tmp = this.descriptionsDataset.abilities.keys();
		while(tmp.hasNext()) {
			var abilitySlug = tmp.next();
			var _this = this.descriptionsDataset.abilities;
			abilityRenderList.push({ 'slug' : abilitySlug, 'label' : (__map_reserved[abilitySlug] != null?_this.getReserved(abilitySlug):_this.h[abilitySlug]).name, 'selected' : abilitySlug == pokemonStats.ability?"selected":""});
		}
		return abilityRenderList;
	}
	,buildEditItemRenderDoc: function(pokemonStats) {
		var itemRenderList = [{ 'slug' : "", 'label' : "-", 'selected' : ""}];
		var tmp = this.descriptionsDataset.items.keys();
		while(tmp.hasNext()) {
			var itemSlug = tmp.next();
			var _this = this.descriptionsDataset.items;
			itemRenderList.push({ 'slug' : itemSlug, 'label' : (__map_reserved[itemSlug] != null?_this.getReserved(itemSlug):_this.h[itemSlug]).name, 'selected' : itemSlug == pokemonStats.item?"selected":""});
		}
		return itemRenderList;
	}
	,buildEditMoveRenderDoc: function(pokemonStats,slot) {
		var moveRenderList = [{ 'slug' : "", 'label' : "-", 'selected' : ""}];
		var tmp = this.movesDataset.moves.keys();
		while(tmp.hasNext()) {
			var moveSlug = tmp.next();
			var tmp1 = moveSlug == pokemonStats.moves[slot]?"selected":"";
			moveRenderList.push({ 'slug' : moveSlug, 'label' : this.movesDataset.getMoveStats(moveSlug).name, 'selected' : tmp1});
		}
		return moveRenderList;
	}
	,attachEditFormListeners: function(pokemonStats) {
		var _gthis = this;
		var genderInput = js.JQuery("#pokemonEditGender");
		var abilityInput = js.JQuery("#pokemonEditAbility");
		var itemInput = js.JQuery("#pokemonEditItem");
		var hpInput = js.JQuery("#pokemonEditHP");
		var attackInput = js.JQuery("#pokemonEditAttack");
		var defenseInput = js.JQuery("#pokemonEditDefense");
		var specialAttackInput = js.JQuery("#pokemonEditSpecialAttack");
		var specialDefenseInput = js.JQuery("#pokemonEditSpecialDefense");
		var speedInput = js.JQuery("#pokemonEditSpeed");
		var move1Input = js.JQuery("#pokemonEditMove1");
		var move2Input = js.JQuery("#pokemonEditMove2");
		var move3Input = js.JQuery("#pokemonEditMove3");
		var move4Input = js.JQuery("#pokemonEditMove4");
		var readValues = function(event) {
			pokemonStats.gender = genderInput.val();
			pokemonStats.ability = abilityInput.val();
			pokemonStats.item = itemInput.val();
			pokemonStats.hp = Std.parseInt(hpInput.val());
			pokemonStats.attack = Std.parseInt(attackInput.val());
			pokemonStats.defense = Std.parseInt(defenseInput.val());
			pokemonStats.specialAttack = Std.parseInt(specialAttackInput.val());
			pokemonStats.specialDefense = Std.parseInt(specialDefenseInput.val());
			pokemonStats.speed = Std.parseInt(speedInput.val());
			var moves = [move1Input.find("option:selected").attr("name"),move2Input.find("option:selected").attr("name"),move3Input.find("option:selected").attr("name"),move4Input.find("option:selected").attr("name")];
			moves = moves.filter(function(item) {
				return item != "";
			});
			pokemonStats.moves = moves;
			console.log(pokemonStats);
			_gthis.applyCustomPokemon(pokemonStats);
		};
		genderInput.change(readValues);
		abilityInput.change(readValues);
		itemInput.change(readValues);
		hpInput.change(readValues);
		attackInput.change(readValues);
		defenseInput.change(readValues);
		specialAttackInput.change(readValues);
		specialDefenseInput.change(readValues);
		speedInput.change(readValues);
		move1Input.change(readValues);
		move2Input.change(readValues);
		move3Input.change(readValues);
		move4Input.change(readValues);
	}
	,applyCustomPokemon: function(pokemonStats) {
		this.pokemonDataset.setPokemonStats(pokemonStats.slug,pokemonStats);
		this.renderAll(false);
	}
	,applyCustomPokemonList: function(pokemonStatsList) {
		var selectElement = js_Boot.__cast(window.document.getElementById("pokemonEditionSelect") , HTMLSelectElement);
		selectElement.selectedIndex = visualizer_PokemonDataset.CUSTOMIZABLE_INDEX;
		var _g = 0;
		while(_g < 6) {
			var slotNum = _g++;
			var pokemonStats = pokemonStatsList[slotNum];
			js.JQuery("#selectionSelect" + slotNum).val(pokemonStats.slug);
			this.pokemonDataset.setPokemonStats(pokemonStats.slug,pokemonStats);
		}
		this.renderAll();
	}
	,renderChart: function() {
		var matchupChart = new visualizer_MatchupChart(this.pokemonDataset,this.movesDataset,this.descriptionsDataset,this.formulaOptions);
		matchupChart.setPokemon(this.getPokemonStatsSelected());
		var tableElement = matchupChart.renderTable();
		js.JQuery("#pokemonDiamond").empty().append(tableElement);
	}
	,attachOptionsListeners: function() {
		var _gthis = this;
		js.JQuery("#formulaOptions-typeImmunities").change(function(event) {
			var checked = js.JQuery("#formulaOptions-typeImmunities").prop("checked");
			_gthis.formulaOptions.typeImmunities = checked;
			_gthis.renderAll(false);
		});
	}
	,renderExtraUrls: function() {
		var numbers = this.getMatchNumbers();
		js.JQuery("#extraUrls").html("\n            View\n            <a href=\"http://www.tppvisuals.com/pbr/visualizer.htm#" + numbers[0] + "-" + numbers[1] + "-" + numbers[2] + "-" + numbers[3] + "-" + numbers[4] + "-" + numbers[5] + "\">\n            Dhason</a> /\n            <a href=\"http://fe1k.de/tpp/visualize#" + numbers[0] + "-" + numbers[1] + "-" + numbers[2] + "-" + numbers[3] + "-" + numbers[4] + "-" + numbers[5] + "\">\n            FelkCraft</a>\n            visualizer\n        ");
	}
	,__class__: visualizer_UI
};
var visualizer_UserMessage = function() {
	this.messageContainer = js_Boot.__cast(window.document.getElementById("messageContainer") , HTMLDivElement);
};
visualizer_UserMessage.__name__ = true;
visualizer_UserMessage.prototype = {
	showMessage: function(text) {
		this.messageContainer.style.display = "block";
		this.messageContainer.textContent = text;
	}
	,hide: function() {
		this.messageContainer.style.display = "none";
	}
	,__class__: visualizer_UserMessage
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var q = window.jQuery;
var js = js || {}
js.JQuery = q;
q.fn.iterator = function() {
	return { pos : 0, j : this, hasNext : function() {
		return this.pos < this.j.length;
	}, next : function() {
		return $(this.j[this.pos++]);
	}};
};
js_Boot.__toStr = { }.toString;
visualizer_APIFacade.CURRENT_MATCH_API_URL = "https://twitchplayspokemon.tv/api/current_match";
visualizer_Formula.LEVEL = 100;
visualizer_Formula.RANDOM_MIN_MODIFIER = 0.85;
visualizer_Formula.CRIT_MODIFIER = 2.0;
visualizer_Formula.FIXED_DAMAGE_MOVE = ["seismic-toss","night-shade"];
visualizer_Formula.WEIGHT_MOVE = ["low-kick","grass-knot"];
visualizer_Formula.HAPPINESS_MOVE = ["return","frustration"];
visualizer_Formula.VARIABLE_POWER_MOVE = ["magnitude"];
visualizer_Main.LOAD_FAIL_MSG = "Loading dataset failed. Reload the page.";
visualizer_MatchupChart.NUM_POKEMON_PER_TEAM = 3;
visualizer_MatchupChart.NUM_MOVES_PER_POKEMON = 4;
visualizer_MatchupChart.POKEMON_LABEL = 1;
visualizer_MatchupChart.POKEMON_MOVES_LABEL = 1;
visualizer_MatchupChart.DIVIDER = 1;
visualizer_PokemonDataset.DATASET_FILES = ["pbr-gold.json","pbr-platinum.json","pbr-seel.json","pbr-gold-1.2.json","pbr-gold-1.2-2015-11-07.json","pbr-2.0.json","pbr-2.0.json"];
visualizer_PokemonDataset.DATASET_NAMES = ["Nkekev PBR Gold","Nkekev PBR Platinum","TPPVisuals PBR Seel","Addarash1/Chaos_lord PBR Gold 1.2","Chauzu PBR Gold 1.2 2015-11-07","Addarash1 PBR 2.0","Customizable (2017)"];
visualizer_PokemonDataset.DEFAULT_INDEX = 6;
visualizer_PokemonDataset.CUSTOMIZABLE_INDEX = 6;
visualizer_UI.Mustache = Mustache;
visualizer_UI.DEFAULT_POKEMON = (function($this) {
	var $r;
	var array = [493,257,462,244,441,139];
	var length = array.length;
	var vec = new Array(length);
	{
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = array[i];
		}
	}
	$r = vec;
	return $r;
}(this));
visualizer_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
